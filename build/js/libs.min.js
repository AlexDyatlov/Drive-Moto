!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(k,t){"use strict";function m(t){return null!=t&&t===t.window}var e=[],o=Object.getPrototypeOf,a=e.slice,g=e.flat?function(t){return e.flat.call(t)}:function(t){return e.concat.apply([],t)},l=e.push,s=e.indexOf,i={},n=i.toString,v=i.hasOwnProperty,r=v.toString,c=r.call(Object),y={},_=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},T=k.document,d={type:!0,src:!0,nonce:!0,noModule:!0};function b(t,e,i){var o,s,n=(i=i||T).createElement("script");if(n.text=t,e)for(o in d)(s=e[o]||e.getAttribute&&e.getAttribute(o))&&n.setAttribute(o,s);i.head.appendChild(n).parentNode.removeChild(n)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?i[n.call(t)]||"object":typeof t}var p="3.5.1",C=function(t,e){return new C.fn.init(t,e)};function h(t){var e=!!t&&"length"in t&&t.length,i=x(t);return!_(t)&&!m(t)&&("array"===i||0===e||"number"==typeof e&&0<e&&e-1 in t)}C.fn=C.prototype={jquery:p,constructor:C,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=C.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return C.each(this,t)},map:function(i){return this.pushStack(C.map(this,function(t,e){return i.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,function(t,e){return(e+1)%2}))},odd:function(){return this.pushStack(C.grep(this,function(t,e){return e%2}))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(0<=i&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},C.extend=C.fn.extend=function(){var t,e,i,o,s,n,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||_(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)o=t[e],"__proto__"!==e&&r!==o&&(c&&o&&(C.isPlainObject(o)||(s=Array.isArray(o)))?(i=r[e],n=s&&!Array.isArray(i)?[]:s||C.isPlainObject(i)?i:{},s=!1,r[e]=C.extend(c,n,o)):void 0!==o&&(r[e]=o));return r},C.extend({expando:"jQuery"+(p+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==n.call(t))&&(!(e=o(t))||"function"==typeof(i=v.call(e,"constructor")&&e.constructor)&&r.call(i)===c)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){b(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,o=0;if(h(t))for(i=t.length;o<i&&!1!==e.call(t[o],o,t[o]);o++);else for(o in t)if(!1===e.call(t[o],o,t[o]))break;return t},makeArray:function(t,e){var i=e||[];return null!=t&&(h(Object(t))?C.merge(i,"string"==typeof t?[t]:t):l.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:s.call(e,t,i)},merge:function(t,e){for(var i=+e.length,o=0,s=t.length;o<i;o++)t[s++]=e[o];return t.length=s,t},grep:function(t,e,i){for(var o=[],s=0,n=t.length,r=!i;s<n;s++)!e(t[s],s)!=r&&o.push(t[s]);return o},map:function(t,e,i){var o,s,n=0,r=[];if(h(t))for(o=t.length;n<o;n++)null!=(s=e(t[n],n,i))&&r.push(s);else for(n in t)null!=(s=e(t[n],n,i))&&r.push(s);return g(r)},guid:1,support:y}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=e[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){i["[object "+e+"]"]=e.toLowerCase()});var u=function(i){function p(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320))}function s(){w()}var t,u,b,n,r,f,h,m,x,l,c,w,k,a,T,g,d,v,y,C="sizzle"+ +new Date,_=i.document,S=0,o=0,$=lt(),A=lt(),j=lt(),E=lt(),D=function(t,e){return t===e&&(c=!0),0},q={}.hasOwnProperty,e=[],N=e.pop,P=e.push,H=e.push,O=e.slice,M=function(t,e){for(var i=0,o=t.length;i<o;i++)if(t[i]===e)return i;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",I="(?:\\\\[\\da-fA-F]{1,6}"+F+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",W="\\["+F+"*("+I+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+F+"*\\]",z=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",R=new RegExp(F+"+","g"),B=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),U=new RegExp("^"+F+"*,"+F+"*"),X=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),V=new RegExp(F+"|>"),Y=new RegExp(z),G=new RegExp("^"+I+"$"),K={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,tt=/^[^{]+\{\s*\[native \w/,et=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,it=/[+~]/,ot=new RegExp("\\\\[\\da-fA-F]{1,6}"+F+"?|\\\\([^\\r\\n\\f])","g"),st=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=yt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(e=O.call(_.childNodes),_.childNodes),e[_.childNodes.length].nodeType}catch(t){H={apply:e.length?function(t,e){P.apply(t,O.call(e))}:function(t,e){for(var i=t.length,o=0;t[i++]=e[o++];);t.length=i-1}}}function at(e,t,i,o){var s,n,r,a,l,c,d,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return i;if(!o&&(w(t),t=t||k,T)){if(11!==h&&(l=et.exec(e)))if(s=l[1]){if(9===h){if(!(r=t.getElementById(s)))return i;if(r.id===s)return i.push(r),i}else if(p&&(r=p.getElementById(s))&&y(t,r)&&r.id===s)return i.push(r),i}else{if(l[2])return H.apply(i,t.getElementsByTagName(e)),i;if((s=l[3])&&u.getElementsByClassName&&t.getElementsByClassName)return H.apply(i,t.getElementsByClassName(s)),i}if(u.qsa&&!E[e+" "]&&(!g||!g.test(e))&&(1!==h||"object"!==t.nodeName.toLowerCase())){if(d=e,p=t,1===h&&(V.test(e)||X.test(e))){for((p=it.test(e)&&mt(t.parentNode)||t)===t&&u.scope||((a=t.getAttribute("id"))?a=a.replace(st,nt):t.setAttribute("id",a=C)),n=(c=f(e)).length;n--;)c[n]=(a?"#"+a:":scope")+" "+vt(c[n]);d=c.join(",")}try{return H.apply(i,p.querySelectorAll(d)),i}catch(t){E(e,!0)}finally{a===C&&t.removeAttribute("id")}}}return m(e.replace(B,"$1"),t,i,o)}function lt(){var i=[];function o(t,e){return i.push(t+" ")>b.cacheLength&&delete o[i.shift()],o[t+" "]=e}return o}function ct(t){return t[C]=!0,t}function dt(t){var e=k.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function pt(t,e){for(var i=t.split("|"),o=i.length;o--;)b.attrHandle[i[o]]=e}function ht(t,e){var i=e&&t,o=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(o)return o;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function ut(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&rt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ft(r){return ct(function(n){return n=+n,ct(function(t,e){for(var i,o=r([],t.length,n),s=o.length;s--;)t[i=o[s]]&&(t[i]=!(e[i]=t[i]))})})}function mt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in u=at.support={},r=at.isXML=function(t){var e=t.namespaceURI,i=(t.ownerDocument||t).documentElement;return!Q.test(e||i&&i.nodeName||"HTML")},w=at.setDocument=function(t){var e,i,o=t?t.ownerDocument||t:_;return o!=k&&9===o.nodeType&&o.documentElement&&(a=(k=o).documentElement,T=!r(k),_!=k&&(i=k.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",s,!1):i.attachEvent&&i.attachEvent("onunload",s)),u.scope=dt(function(t){return a.appendChild(t).appendChild(k.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length}),u.attributes=dt(function(t){return t.className="i",!t.getAttribute("className")}),u.getElementsByTagName=dt(function(t){return t.appendChild(k.createComment("")),!t.getElementsByTagName("*").length}),u.getElementsByClassName=tt.test(k.getElementsByClassName),u.getById=dt(function(t){return a.appendChild(t).id=C,!k.getElementsByName||!k.getElementsByName(C).length}),u.getById?(b.filter.ID=function(t){var e=t.replace(ot,p);return function(t){return t.getAttribute("id")===e}},b.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var i=e.getElementById(t);return i?[i]:[]}}):(b.filter.ID=function(t){var i=t.replace(ot,p);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===i}},b.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var i,o,s,n=e.getElementById(t);if(n){if((i=n.getAttributeNode("id"))&&i.value===t)return[n];for(s=e.getElementsByName(t),o=0;n=s[o++];)if((i=n.getAttributeNode("id"))&&i.value===t)return[n]}return[]}}),b.find.TAG=u.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):u.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,o=[],s=0,n=e.getElementsByTagName(t);if("*"!==t)return n;for(;i=n[s++];)1===i.nodeType&&o.push(i);return o},b.find.CLASS=u.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&T)return e.getElementsByClassName(t)},d=[],g=[],(u.qsa=tt.test(k.querySelectorAll))&&(dt(function(t){var e;a.appendChild(t).innerHTML="<a id='"+C+"'></a><select id='"+C+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+F+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+F+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+C+"-]").length||g.push("~="),(e=k.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||g.push("\\["+F+"*name"+F+"*="+F+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+C+"+*").length||g.push(".#.+[+~]"),t.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")}),dt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=k.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+F+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),a.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")})),(u.matchesSelector=tt.test(v=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&dt(function(t){u.disconnectedMatch=v.call(t,"*"),v.call(t,"[s!='']:x"),d.push("!=",z)}),g=g.length&&new RegExp(g.join("|")),d=d.length&&new RegExp(d.join("|")),e=tt.test(a.compareDocumentPosition),y=e||tt.test(a.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,o=e&&e.parentNode;return t===o||!(!o||1!==o.nodeType||!(i.contains?i.contains(o):t.compareDocumentPosition&&16&t.compareDocumentPosition(o)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},D=e?function(t,e){if(t===e)return c=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!u.sortDetached&&e.compareDocumentPosition(t)===i?t==k||t.ownerDocument==_&&y(_,t)?-1:e==k||e.ownerDocument==_&&y(_,e)?1:l?M(l,t)-M(l,e):0:4&i?-1:1)}:function(t,e){if(t===e)return c=!0,0;var i,o=0,s=t.parentNode,n=e.parentNode,r=[t],a=[e];if(!s||!n)return t==k?-1:e==k?1:s?-1:n?1:l?M(l,t)-M(l,e):0;if(s===n)return ht(t,e);for(i=t;i=i.parentNode;)r.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;r[o]===a[o];)o++;return o?ht(r[o],a[o]):r[o]==_?-1:a[o]==_?1:0}),k},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(w(t),u.matchesSelector&&T&&!E[e+" "]&&(!d||!d.test(e))&&(!g||!g.test(e)))try{var i=v.call(t,e);if(i||u.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){E(e,!0)}return 0<at(e,k,null,[t]).length},at.contains=function(t,e){return(t.ownerDocument||t)!=k&&w(t),y(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=k&&w(t);var i=b.attrHandle[e.toLowerCase()],o=i&&q.call(b.attrHandle,e.toLowerCase())?i(t,e,!T):void 0;return void 0!==o?o:u.attributes||!T?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},at.escape=function(t){return(t+"").replace(st,nt)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],o=0,s=0;if(c=!u.detectDuplicates,l=!u.sortStable&&t.slice(0),t.sort(D),c){for(;e=t[s++];)e===t[s]&&(o=i.push(s));for(;o--;)t.splice(i[o],1)}return l=null,t},n=at.getText=function(t){var e,i="",o=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=n(t)}else if(3===s||4===s)return t.nodeValue}else for(;e=t[o++];)i+=n(e);return i},(b=at.selectors={cacheLength:50,createPseudo:ct,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(ot,p),t[3]=(t[3]||t[4]||t[5]||"").replace(ot,p),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&Y.test(i)&&(e=f(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(ot,p).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=$[t+" "];return e||(e=new RegExp("(^|"+F+")"+t+"("+F+"|$)"))&&$(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(i,o,s){return function(t){var e=at.attr(t,i);return null==e?"!="===o:!o||(e+="","="===o?e===s:"!="===o?e!==s:"^="===o?s&&0===e.indexOf(s):"*="===o?s&&-1<e.indexOf(s):"$="===o?s&&e.slice(-s.length)===s:"~="===o?-1<(" "+e.replace(R," ")+" ").indexOf(s):"|="===o&&(e===s||e.slice(0,s.length+1)===s+"-"))}},CHILD:function(f,t,e,m,g){var v="nth"!==f.slice(0,3),y="last"!==f.slice(-4),_="of-type"===t;return 1===m&&0===g?function(t){return!!t.parentNode}:function(t,e,i){var o,s,n,r,a,l,c=v!=y?"nextSibling":"previousSibling",d=t.parentNode,p=_&&t.nodeName.toLowerCase(),h=!i&&!_,u=!1;if(d){if(v){for(;c;){for(r=t;r=r[c];)if(_?r.nodeName.toLowerCase()===p:1===r.nodeType)return!1;l=c="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?d.firstChild:d.lastChild],y&&h){for(u=(a=(o=(s=(n=(r=d)[C]||(r[C]={}))[r.uniqueID]||(n[r.uniqueID]={}))[f]||[])[0]===S&&o[1])&&o[2],r=a&&d.childNodes[a];r=++a&&r&&r[c]||(u=a=0)||l.pop();)if(1===r.nodeType&&++u&&r===t){s[f]=[S,a,u];break}}else if(h&&(u=a=(o=(s=(n=(r=t)[C]||(r[C]={}))[r.uniqueID]||(n[r.uniqueID]={}))[f]||[])[0]===S&&o[1]),!1===u)for(;(r=++a&&r&&r[c]||(u=a=0)||l.pop())&&((_?r.nodeName.toLowerCase()!==p:1!==r.nodeType)||!++u||(h&&((s=(n=r[C]||(r[C]={}))[r.uniqueID]||(n[r.uniqueID]={}))[f]=[S,u]),r!==t)););return(u-=g)===m||u%m==0&&0<=u/m}}},PSEUDO:function(t,n){var e,r=b.pseudos[t]||b.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return r[C]?r(n):1<r.length?(e=[t,t,"",n],b.setFilters.hasOwnProperty(t.toLowerCase())?ct(function(t,e){for(var i,o=r(t,n),s=o.length;s--;)t[i=M(t,o[s])]=!(e[i]=o[s])}):function(t){return r(t,0,e)}):r}},pseudos:{not:ct(function(t){var o=[],s=[],a=h(t.replace(B,"$1"));return a[C]?ct(function(t,e,i,o){for(var s,n=a(t,null,o,[]),r=t.length;r--;)(s=n[r])&&(t[r]=!(e[r]=s))}):function(t,e,i){return o[0]=t,a(o,null,i,s),o[0]=null,!s.pop()}}),has:ct(function(e){return function(t){return 0<at(e,t).length}}),contains:ct(function(e){return e=e.replace(ot,p),function(t){return-1<(t.textContent||n(t)).indexOf(e)}}),lang:ct(function(i){return G.test(i||"")||at.error("unsupported lang: "+i),i=i.replace(ot,p).toLowerCase(),function(t){var e;do{if(e=T?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===i||0===e.indexOf(i+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=i.location&&i.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===a},focus:function(t){return t===k.activeElement&&(!k.hasFocus||k.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:ut(!1),disabled:ut(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!b.pseudos.empty(t)},header:function(t){return Z.test(t.nodeName)},input:function(t){return J.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:ft(function(){return[0]}),last:ft(function(t,e){return[e-1]}),eq:ft(function(t,e,i){return[i<0?i+e:i]}),even:ft(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:ft(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:ft(function(t,e,i){for(var o=i<0?i+e:e<i?e:i;0<=--o;)t.push(o);return t}),gt:ft(function(t,e,i){for(var o=i<0?i+e:i;++o<e;)t.push(o);return t})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[t]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(t);for(t in{submit:!0,reset:!0})b.pseudos[t]=function(i){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===i}}(t);function gt(){}function vt(t){for(var e=0,i=t.length,o="";e<i;e++)o+=t[e].value;return o}function yt(a,t,e){var l=t.dir,c=t.next,d=c||l,p=e&&"parentNode"===d,h=o++;return t.first?function(t,e,i){for(;t=t[l];)if(1===t.nodeType||p)return a(t,e,i);return!1}:function(t,e,i){var o,s,n,r=[S,h];if(i){for(;t=t[l];)if((1===t.nodeType||p)&&a(t,e,i))return!0}else for(;t=t[l];)if(1===t.nodeType||p)if(s=(n=t[C]||(t[C]={}))[t.uniqueID]||(n[t.uniqueID]={}),c&&c===t.nodeName.toLowerCase())t=t[l]||t;else{if((o=s[d])&&o[0]===S&&o[1]===h)return r[2]=o[2];if((s[d]=r)[2]=a(t,e,i))return!0}return!1}}function _t(s){return 1<s.length?function(t,e,i){for(var o=s.length;o--;)if(!s[o](t,e,i))return!1;return!0}:s[0]}function bt(t,e,i,o,s){for(var n,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(n=t[a])&&(i&&!i(n,o,s)||(r.push(n),c&&e.push(a)));return r}function xt(u,f,m,g,v,t){return g&&!g[C]&&(g=xt(g)),v&&!v[C]&&(v=xt(v,t)),ct(function(t,e,i,o){var s,n,r,a=[],l=[],c=e.length,d=t||function(t,e,i){for(var o=0,s=e.length;o<s;o++)at(t,e[o],i);return i}(f||"*",i.nodeType?[i]:i,[]),p=!u||!t&&f?d:bt(d,a,u,i,o),h=m?v||(t?u:c||g)?[]:e:p;if(m&&m(p,h,i,o),g)for(s=bt(h,l),g(s,[],i,o),n=s.length;n--;)(r=s[n])&&(h[l[n]]=!(p[l[n]]=r));if(t){if(v||u){if(v){for(s=[],n=h.length;n--;)(r=h[n])&&s.push(p[n]=r);v(null,h=[],s,o)}for(n=h.length;n--;)(r=h[n])&&-1<(s=v?M(t,r):a[n])&&(t[s]=!(e[s]=r))}}else h=bt(h===e?h.splice(c,h.length):h),v?v(null,e,h,o):H.apply(e,h)})}function wt(g,v){function t(t,e,i,o,s){var n,r,a,l=0,c="0",d=t&&[],p=[],h=x,u=t||_&&b.find.TAG("*",s),f=S+=null==h?1:Math.random()||.1,m=u.length;for(s&&(x=e==k||e||s);c!==m&&null!=(n=u[c]);c++){if(_&&n){for(r=0,e||n.ownerDocument==k||(w(n),i=!T);a=g[r++];)if(a(n,e||k,i)){o.push(n);break}s&&(S=f)}y&&((n=!a&&n)&&l--,t&&d.push(n))}if(l+=c,y&&c!==l){for(r=0;a=v[r++];)a(d,p,e,i);if(t){if(0<l)for(;c--;)d[c]||p[c]||(p[c]=N.call(o));p=bt(p)}H.apply(o,p),s&&!t&&0<p.length&&1<l+v.length&&at.uniqueSort(o)}return s&&(S=f,x=h),d}var y=0<v.length,_=0<g.length;return y?ct(t):t}return gt.prototype=b.filters=b.pseudos,b.setFilters=new gt,f=at.tokenize=function(t,e){var i,o,s,n,r,a,l,c=A[t+" "];if(c)return e?0:c.slice(0);for(r=t,a=[],l=b.preFilter;r;){for(n in i&&!(o=U.exec(r))||(o&&(r=r.slice(o[0].length)||r),a.push(s=[])),i=!1,(o=X.exec(r))&&(i=o.shift(),s.push({value:i,type:o[0].replace(B," ")}),r=r.slice(i.length)),b.filter)!(o=K[n].exec(r))||l[n]&&!(o=l[n](o))||(i=o.shift(),s.push({value:i,type:n,matches:o}),r=r.slice(i.length));if(!i)break}return e?r.length:r?at.error(t):A(t,a).slice(0)},h=at.compile=function(t,e){var i,o=[],s=[],n=j[t+" "];if(!n){for(i=(e=e||f(t)).length;i--;)(n=function t(e){for(var s,i,o,n=e.length,r=b.relative[e[0].type],a=r||b.relative[" "],l=r?1:0,c=yt(function(t){return t===s},a,!0),d=yt(function(t){return-1<M(s,t)},a,!0),p=[function(t,e,i){var o=!r&&(i||e!==x)||((s=e).nodeType?c:d)(t,e,i);return s=null,o}];l<n;l++)if(i=b.relative[e[l].type])p=[yt(_t(p),i)];else{if((i=b.filter[e[l].type].apply(null,e[l].matches))[C]){for(o=++l;o<n&&!b.relative[e[o].type];o++);return xt(1<l&&_t(p),1<l&&vt(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(B,"$1"),i,l<o&&t(e.slice(l,o)),o<n&&t(e=e.slice(o)),o<n&&vt(e))}p.push(i)}return _t(p)}(e[i]))[C]?o.push(n):s.push(n);(n=j(t,wt(s,o))).selector=t}return n},m=at.select=function(t,e,i,o){var s,n,r,a,l,c="function"==typeof t&&t,d=!o&&f(t=c.selector||t);if(i=i||[],1===d.length){if(2<(n=d[0]=d[0].slice(0)).length&&"ID"===(r=n[0]).type&&9===e.nodeType&&T&&b.relative[n[1].type]){if(!(e=(b.find.ID(r.matches[0].replace(ot,p),e)||[])[0]))return i;c&&(e=e.parentNode),t=t.slice(n.shift().value.length)}for(s=K.needsContext.test(t)?0:n.length;s--&&(r=n[s],!b.relative[a=r.type]);)if((l=b.find[a])&&(o=l(r.matches[0].replace(ot,p),it.test(n[0].type)&&mt(e.parentNode)||e))){if(n.splice(s,1),!(t=o.length&&vt(n)))return H.apply(i,o),i;break}}return(c||h(t,d))(o,e,!T,i,!e||it.test(t)&&mt(e.parentNode)||e),i},u.sortStable=C.split("").sort(D).join("")===C,u.detectDuplicates=!!c,w(),u.sortDetached=dt(function(t){return 1&t.compareDocumentPosition(k.createElement("fieldset"))}),dt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||pt("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),u.attributes&&dt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||pt("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),dt(function(t){return null==t.getAttribute("disabled")})||pt(L,function(t,e,i){var o;if(!i)return!0===t[e]?e.toLowerCase():(o=t.getAttributeNode(e))&&o.specified?o.value:null}),at}(k);C.find=u,C.expr=u.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=u.uniqueSort,C.text=u.getText,C.isXMLDoc=u.isXML,C.contains=u.contains,C.escapeSelector=u.escape;function f(t,e,i){for(var o=[],s=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&C(t).is(i))break;o.push(t)}return o}function w(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}var S=C.expr.match.needsContext;function $(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(t,i,o){return _(i)?C.grep(t,function(t,e){return!!i.call(t,e,t)!==o}):i.nodeType?C.grep(t,function(t){return t===i!==o}):"string"!=typeof i?C.grep(t,function(t){return-1<s.call(i,t)!==o}):C.filter(i,t,o)}C.filter=function(t,e,i){var o=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===o.nodeType?C.find.matchesSelector(o,t)?[o]:[]:C.find.matches(t,C.grep(e,function(t){return 1===t.nodeType}))},C.fn.extend({find:function(t){var e,i,o=this.length,s=this;if("string"!=typeof t)return this.pushStack(C(t).filter(function(){for(e=0;e<o;e++)if(C.contains(s[e],this))return!0}));for(i=this.pushStack([]),e=0;e<o;e++)C.find(t,s[e],i);return 1<o?C.uniqueSort(i):i},filter:function(t){return this.pushStack(j(this,t||[],!1))},not:function(t){return this.pushStack(j(this,t||[],!0))},is:function(t){return!!j(this,"string"==typeof t&&S.test(t)?C(t):t||[],!1).length}});var E,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(t,e,i){var o,s;if(!t)return this;if(i=i||E,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):_(t)?void 0!==i.ready?i.ready(t):t(C):C.makeArray(t,this);if(!(o="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:D.exec(t))||!o[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(o[1]){if(e=e instanceof C?e[0]:e,C.merge(this,C.parseHTML(o[1],e&&e.nodeType?e.ownerDocument||e:T,!0)),A.test(o[1])&&C.isPlainObject(e))for(o in e)_(this[o])?this[o](e[o]):this.attr(o,e[o]);return this}return(s=T.getElementById(o[2]))&&(this[0]=s,this.length=1),this}).prototype=C.fn,E=C(T);var q=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function P(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}C.fn.extend({has:function(t){var e=C(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(C.contains(this,e[t]))return!0})},closest:function(t,e){var i,o=0,s=this.length,n=[],r="string"!=typeof t&&C(t);if(!S.test(t))for(;o<s;o++)for(i=this[o];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&C.find.matchesSelector(i,t))){n.push(i);break}return this.pushStack(1<n.length?C.uniqueSort(n):n)},index:function(t){return t?"string"==typeof t?s.call(C(t),this[0]):s.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),C.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return f(t,"parentNode")},parentsUntil:function(t,e,i){return f(t,"parentNode",i)},next:function(t){return P(t,"nextSibling")},prev:function(t){return P(t,"previousSibling")},nextAll:function(t){return f(t,"nextSibling")},prevAll:function(t){return f(t,"previousSibling")},nextUntil:function(t,e,i){return f(t,"nextSibling",i)},prevUntil:function(t,e,i){return f(t,"previousSibling",i)},siblings:function(t){return w((t.parentNode||{}).firstChild,t)},children:function(t){return w(t.firstChild)},contents:function(t){return null!=t.contentDocument&&o(t.contentDocument)?t.contentDocument:($(t,"template")&&(t=t.content||t),C.merge([],t.childNodes))}},function(o,s){C.fn[o]=function(t,e){var i=C.map(this,s,t);return"Until"!==o.slice(-5)&&(e=t),e&&"string"==typeof e&&(i=C.filter(e,i)),1<this.length&&(N[o]||C.uniqueSort(i),q.test(o)&&i.reverse()),this.pushStack(i)}});var H=/[^\x20\t\r\n\f]+/g;function O(t){return t}function M(t){throw t}function L(t,e,i,o){var s;try{t&&_(s=t.promise)?s.call(t).done(e).fail(i):t&&_(s=t.then)?s.call(t,e,i):e.apply(void 0,[t].slice(o))}catch(t){i.apply(void 0,[t])}}C.Callbacks=function(o){var t,i;o="string"==typeof o?(t=o,i={},C.each(t.match(H)||[],function(t,e){i[e]=!0}),i):C.extend({},o);function s(){for(a=a||o.once,r=n=!0;c.length;d=-1)for(e=c.shift();++d<l.length;)!1===l[d].apply(e[0],e[1])&&o.stopOnFalse&&(d=l.length,e=!1);o.memory||(e=!1),n=!1,a&&(l=e?[]:"")}var n,e,r,a,l=[],c=[],d=-1,p={add:function(){return l&&(e&&!n&&(d=l.length-1,c.push(e)),function i(t){C.each(t,function(t,e){_(e)?o.unique&&p.has(e)||l.push(e):e&&e.length&&"string"!==x(e)&&i(e)})}(arguments),e&&!n&&s()),this},remove:function(){return C.each(arguments,function(t,e){for(var i;-1<(i=C.inArray(e,l,i));)l.splice(i,1),i<=d&&d--}),this},has:function(t){return t?-1<C.inArray(t,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=e="",this},disabled:function(){return!l},lock:function(){return a=c=[],e||n||(l=e=""),this},locked:function(){return!!a},fireWith:function(t,e){return a||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),n||s()),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!r}};return p},C.extend({Deferred:function(t){var n=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],s="pending",r={state:function(){return s},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var s=arguments;return C.Deferred(function(o){C.each(n,function(t,e){var i=_(s[e[4]])&&s[e[4]];a[e[1]](function(){var t=i&&i.apply(this,arguments);t&&_(t.promise)?t.promise().progress(o.notify).done(o.resolve).fail(o.reject):o[e[0]+"With"](this,i?[t]:arguments)})}),s=null}).promise()},then:function(e,i,o){var l=0;function c(s,n,r,a){return function(){function t(){var t,e;if(!(s<l)){if((t=r.apply(i,o))===n.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,_(e)?a?e.call(t,c(l,n,O,a),c(l,n,M,a)):(l++,e.call(t,c(l,n,O,a),c(l,n,M,a),c(l,n,O,n.notifyWith))):(r!==O&&(i=void 0,o=[t]),(a||n.resolveWith)(i,o))}}var i=this,o=arguments,e=a?t:function(){try{t()}catch(t){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(t,e.stackTrace),l<=s+1&&(r!==M&&(i=void 0,o=[t]),n.rejectWith(i,o))}};s?e():(C.Deferred.getStackHook&&(e.stackTrace=C.Deferred.getStackHook()),k.setTimeout(e))}}return C.Deferred(function(t){n[0][3].add(c(0,t,_(o)?o:O,t.notifyWith)),n[1][3].add(c(0,t,_(e)?e:O)),n[2][3].add(c(0,t,_(i)?i:M))}).promise()},promise:function(t){return null!=t?C.extend(t,r):r}},a={};return C.each(n,function(t,e){var i=e[2],o=e[5];r[e[1]]=i.add,o&&i.add(function(){s=o},n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),i.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=i.fireWith}),r.promise(a),t&&t.call(a,a),a},when:function(t){function e(e){return function(t){s[e]=this,n[e]=1<arguments.length?a.call(arguments):t,--i||r.resolveWith(s,n)}}var i=arguments.length,o=i,s=Array(o),n=a.call(arguments),r=C.Deferred();if(i<=1&&(L(t,r.done(e(o)).resolve,r.reject,!i),"pending"===r.state()||_(n[o]&&n[o].then)))return r.then();for(;o--;)L(n[o],e(o),r.reject);return r.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(t,e){k.console&&k.console.warn&&t&&F.test(t.name)&&k.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},C.readyException=function(t){k.setTimeout(function(){throw t})};var I=C.Deferred();function W(){T.removeEventListener("DOMContentLoaded",W),k.removeEventListener("load",W),C.ready()}C.fn.ready=function(t){return I.then(t).catch(function(t){C.readyException(t)}),this},C.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--C.readyWait:C.isReady)||(C.isReady=!0)!==t&&0<--C.readyWait||I.resolveWith(T,[C])}}),C.ready.then=I.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?k.setTimeout(C.ready):(T.addEventListener("DOMContentLoaded",W),k.addEventListener("load",W));var z=function(t,e,i,o,s,n,r){var a=0,l=t.length,c=null==i;if("object"===x(i))for(a in s=!0,i)z(t,e,a,i[a],!0,n,r);else if(void 0!==o&&(s=!0,_(o)||(r=!0),c&&(e=r?(e.call(t,o),null):(c=e,function(t,e,i){return c.call(C(t),i)})),e))for(;a<l;a++)e(t[a],i,r?o:o.call(t[a],a,e(t[a],i)));return s?t:c?e.call(t):l?e(t[0],i):n},R=/^-ms-/,B=/-([a-z])/g;function U(t,e){return e.toUpperCase()}function X(t){return t.replace(R,"ms-").replace(B,U)}function V(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function Y(){this.expando=C.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(t){var e=t[this.expando];return e||(e={},V(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var o,s=this.cache(t);if("string"==typeof e)s[X(e)]=i;else for(o in e)s[X(o)]=e[o];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,o=t[this.expando];if(void 0!==o){if(void 0!==e){i=(e=Array.isArray(e)?e.map(X):(e=X(e))in o?[e]:e.match(H)||[]).length;for(;i--;)delete o[e[i]]}void 0!==e&&!C.isEmptyObject(o)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!C.isEmptyObject(e)}};var G=new Y,K=new Y,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function Z(t,e,i){var o,s;if(void 0===i&&1===t.nodeType)if(o="data-"+e.replace(J,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(o))){try{i="true"===(s=i)||"false"!==s&&("null"===s?null:s===+s+""?+s:Q.test(s)?JSON.parse(s):s)}catch(t){}K.set(t,e,i)}else i=void 0;return i}C.extend({hasData:function(t){return K.hasData(t)||G.hasData(t)},data:function(t,e,i){return K.access(t,e,i)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,i){return G.access(t,e,i)},_removeData:function(t,e){G.remove(t,e)}}),C.fn.extend({data:function(i,t){var e,o,s,n=this[0],r=n&&n.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){K.set(this,i)}):z(this,function(t){var e;return n&&void 0===t?void 0!==(e=K.get(n,i))||void 0!==(e=Z(n,i))?e:void 0:void this.each(function(){K.set(this,i,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(s=K.get(n),1===n.nodeType&&!G.get(n,"hasDataAttrs"))){for(e=r.length;e--;)r[e]&&0===(o=r[e].name).indexOf("data-")&&(o=X(o.slice(5)),Z(n,o,s[o]));G.set(n,"hasDataAttrs",!0)}return s},removeData:function(t){return this.each(function(){K.remove(this,t)})}}),C.extend({queue:function(t,e,i){var o;if(t)return e=(e||"fx")+"queue",o=G.get(t,e),i&&(!o||Array.isArray(i)?o=G.access(t,e,C.makeArray(i)):o.push(i)),o||[]},dequeue:function(t,e){e=e||"fx";var i=C.queue(t,e),o=i.length,s=i.shift(),n=C._queueHooks(t,e);"inprogress"===s&&(s=i.shift(),o--),s&&("fx"===e&&i.unshift("inprogress"),delete n.stop,s.call(t,function(){C.dequeue(t,e)},n)),!o&&n&&n.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return G.get(t,i)||G.access(t,i,{empty:C.Callbacks("once memory").add(function(){G.remove(t,[e+"queue",i])})})}}),C.fn.extend({queue:function(e,i){var t=2;return"string"!=typeof e&&(i=e,e="fx",t--),arguments.length<t?C.queue(this[0],e):void 0===i?this:this.each(function(){var t=C.queue(this,e,i);C._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&C.dequeue(this,e)})},dequeue:function(t){return this.each(function(){C.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function i(){--s||n.resolveWith(r,[r])}var o,s=1,n=C.Deferred(),r=this,a=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(o=G.get(r[a],t+"queueHooks"))&&o.empty&&(s++,o.empty.add(i));return i(),n.promise(e)}});var tt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,et=new RegExp("^(?:([+-])=|)("+tt+")([a-z%]*)$","i"),it=["Top","Right","Bottom","Left"],ot=T.documentElement,st=function(t){return C.contains(t.ownerDocument,t)},nt={composed:!0};ot.getRootNode&&(st=function(t){return C.contains(t.ownerDocument,t)||t.getRootNode(nt)===t.ownerDocument});var rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&st(t)&&"none"===C.css(t,"display")};function at(t,e,i,o){var s,n,r=20,a=o?function(){return o.cur()}:function(){return C.css(t,e,"")},l=a(),c=i&&i[3]||(C.cssNumber[e]?"":"px"),d=t.nodeType&&(C.cssNumber[e]||"px"!==c&&+l)&&et.exec(C.css(t,e));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;r--;)C.style(t,e,d+c),(1-n)*(1-(n=a()/l||.5))<=0&&(r=0),d/=n;d*=2,C.style(t,e,d+c),i=i||[]}return i&&(d=+d||+l||0,s=i[1]?d+(i[1]+1)*i[2]:+i[2],o&&(o.unit=c,o.start=d,o.end=s)),s}var lt={};function ct(t,e){for(var i,o,s,n,r,a,l,c=[],d=0,p=t.length;d<p;d++)(o=t[d]).style&&(i=o.style.display,e?("none"===i&&(c[d]=G.get(o,"display")||null,c[d]||(o.style.display="")),""===o.style.display&&rt(o)&&(c[d]=(l=a=r=n=void 0,r=(s=o).ownerDocument,a=s.nodeName,(l=lt[a])||(n=r.body.appendChild(r.createElement(a)),l=C.css(n,"display"),n.parentNode.removeChild(n),"none"===l&&(l="block"),lt[a]=l)))):"none"!==i&&(c[d]="none",G.set(o,"display",i)));for(d=0;d<p;d++)null!=c[d]&&(t[d].style.display=c[d]);return t}C.fn.extend({show:function(){return ct(this,!0)},hide:function(){return ct(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){rt(this)?C(this).show():C(this).hide()})}});var dt,pt,ht=/^(?:checkbox|radio)$/i,ut=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ft=/^$|^module$|\/(?:java|ecma)script/i;dt=T.createDocumentFragment().appendChild(T.createElement("div")),(pt=T.createElement("input")).setAttribute("type","radio"),pt.setAttribute("checked","checked"),pt.setAttribute("name","t"),dt.appendChild(pt),y.checkClone=dt.cloneNode(!0).cloneNode(!0).lastChild.checked,dt.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!dt.cloneNode(!0).lastChild.defaultValue,dt.innerHTML="<option></option>",y.option=!!dt.lastChild;var mt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function gt(t,e){var i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&$(t,e)?C.merge([t],i):i}function vt(t,e){for(var i=0,o=t.length;i<o;i++)G.set(t[i],"globalEval",!e||G.get(e[i],"globalEval"))}mt.tbody=mt.tfoot=mt.colgroup=mt.caption=mt.thead,mt.th=mt.td,y.option||(mt.optgroup=mt.option=[1,"<select multiple='multiple'>","</select>"]);var yt=/<|&#?\w+;/;function _t(t,e,i,o,s){for(var n,r,a,l,c,d,p=e.createDocumentFragment(),h=[],u=0,f=t.length;u<f;u++)if((n=t[u])||0===n)if("object"===x(n))C.merge(h,n.nodeType?[n]:n);else if(yt.test(n)){for(r=r||p.appendChild(e.createElement("div")),a=(ut.exec(n)||["",""])[1].toLowerCase(),l=mt[a]||mt._default,r.innerHTML=l[1]+C.htmlPrefilter(n)+l[2],d=l[0];d--;)r=r.lastChild;C.merge(h,r.childNodes),(r=p.firstChild).textContent=""}else h.push(e.createTextNode(n));for(p.textContent="",u=0;n=h[u++];)if(o&&-1<C.inArray(n,o))s&&s.push(n);else if(c=st(n),r=gt(p.appendChild(n),"script"),c&&vt(r),i)for(d=0;n=r[d++];)ft.test(n.type||"")&&i.push(n);return p}var bt=/^key/,xt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,wt=/^([^.]*)(?:\.(.+)|)/;function kt(){return!0}function Tt(){return!1}function Ct(t,e){return t===function(){try{return T.activeElement}catch(t){}}()==("focus"===e)}function St(t,e,i,o,s,n){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(o=o||i,i=void 0),e)St(t,a,i,o,e[a],n);return t}if(null==o&&null==s?(s=i,o=i=void 0):null==s&&("string"==typeof i?(s=o,o=void 0):(s=o,o=i,i=void 0)),!1===s)s=Tt;else if(!s)return t;return 1===n&&(r=s,(s=function(t){return C().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=C.guid++)),t.each(function(){C.event.add(this,e,s,o,i)})}function $t(t,s,n){n?(G.set(t,s,!1),C.event.add(t,s,{namespace:!1,handler:function(t){var e,i,o=G.get(this,s);if(1&t.isTrigger&&this[s]){if(o.length)(C.event.special[s]||{}).delegateType&&t.stopPropagation();else if(o=a.call(arguments),G.set(this,s,o),e=n(this,s),this[s](),o!==(i=G.get(this,s))||e?G.set(this,s,!1):i={},o!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else o.length&&(G.set(this,s,{value:C.event.trigger(C.extend(o[0],C.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===G.get(t,s)&&C.event.add(t,s,kt)}C.event={global:{},add:function(e,t,i,o,s){var n,r,a,l,c,d,p,h,u,f,m,g=G.get(e);if(V(e))for(i.handler&&(i=(n=i).handler,s=n.selector),s&&C.find.matchesSelector(ot,s),i.guid||(i.guid=C.guid++),(l=g.events)||(l=g.events=Object.create(null)),(r=g.handle)||(r=g.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(H)||[""]).length;c--;)u=m=(a=wt.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),u&&(p=C.event.special[u]||{},u=(s?p.delegateType:p.bindType)||u,p=C.event.special[u]||{},d=C.extend({type:u,origType:m,data:o,handler:i,guid:i.guid,selector:s,needsContext:s&&C.expr.match.needsContext.test(s),namespace:f.join(".")},n),(h=l[u])||((h=l[u]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,o,f,r)||e.addEventListener&&e.addEventListener(u,r)),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=i.guid)),s?h.splice(h.delegateCount++,0,d):h.push(d),C.event.global[u]=!0)},remove:function(t,e,i,o,s){var n,r,a,l,c,d,p,h,u,f,m,g=G.hasData(t)&&G.get(t);if(g&&(l=g.events)){for(c=(e=(e||"").match(H)||[""]).length;c--;)if(u=m=(a=wt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),u){for(p=C.event.special[u]||{},h=l[u=(o?p.delegateType:p.bindType)||u]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=n=h.length;n--;)d=h[n],!s&&m!==d.origType||i&&i.guid!==d.guid||a&&!a.test(d.namespace)||o&&o!==d.selector&&("**"!==o||!d.selector)||(h.splice(n,1),d.selector&&h.delegateCount--,p.remove&&p.remove.call(t,d));r&&!h.length&&(p.teardown&&!1!==p.teardown.call(t,f,g.handle)||C.removeEvent(t,u,g.handle),delete l[u])}else for(u in l)C.event.remove(t,u+e[c],i,o,!0);C.isEmptyObject(l)&&G.remove(t,"handle events")}},dispatch:function(t){var e,i,o,s,n,r,a=new Array(arguments.length),l=C.event.fix(t),c=(G.get(this,"events")||Object.create(null))[l.type]||[],d=C.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(r=C.event.handlers.call(this,l,c),e=0;(s=r[e++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(n=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==n.namespace&&!l.rnamespace.test(n.namespace)||(l.handleObj=n,l.data=n.data,void 0!==(o=((C.event.special[n.origType]||{}).handle||n.handler).apply(s.elem,a))&&!1===(l.result=o)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,o,s,n,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(n=[],r={},i=0;i<l;i++)void 0===r[s=(o=e[i]).selector+" "]&&(r[s]=o.needsContext?-1<C(s,this).index(c):C.find(s,this,null,[c]).length),r[s]&&n.push(o);n.length&&a.push({elem:c,handlers:n})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:_(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[C.expando]?t:new C.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return ht.test(e.type)&&e.click&&$(e,"input")&&$t(e,"click",kt),!1},trigger:function(t){var e=this||t;return ht.test(e.type)&&e.click&&$(e,"input")&&$t(e,"click"),!0},_default:function(t){var e=t.target;return ht.test(e.type)&&e.click&&$(e,"input")&&G.get(e,"click")||$(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},C.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},C.Event=function(t,e){if(!(this instanceof C.Event))return new C.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?kt:Tt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&C.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Tt,isPropagationStopped:Tt,isImmediatePropagationStopped:Tt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=kt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=kt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=kt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&bt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&xt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},function(t,e){C.event.special[t]={setup:function(){return $t(this,t,Ct),!1},trigger:function(){return $t(this,t),!0},delegateType:e}}),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,s){C.event.special[t]={delegateType:s,bindType:s,handle:function(t){var e,i=t.relatedTarget,o=t.handleObj;return i&&(i===this||C.contains(this,i))||(t.type=o.origType,e=o.handler.apply(this,arguments),t.type=s),e}}}),C.fn.extend({on:function(t,e,i,o){return St(this,t,e,i,o)},one:function(t,e,i,o){return St(this,t,e,i,o,1)},off:function(t,e,i){var o,s;if(t&&t.preventDefault&&t.handleObj)return o=t.handleObj,C(t.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=Tt),this.each(function(){C.event.remove(this,t,i,e)});for(s in t)this.off(s,e,t[s]);return this}});var At=/<script|<style|<link/i,jt=/checked\s*(?:[^=]|=\s*.checked.)/i,Et=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Dt(t,e){return $(t,"table")&&$(11!==e.nodeType?e:e.firstChild,"tr")&&C(t).children("tbody")[0]||t}function qt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Nt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Pt(t,e){var i,o,s,n,r,a;if(1===e.nodeType){if(G.hasData(t)&&(a=G.get(t).events))for(s in G.remove(e,"handle events"),a)for(i=0,o=a[s].length;i<o;i++)C.event.add(e,s,a[s][i]);K.hasData(t)&&(n=K.access(t),r=C.extend({},n),K.set(e,r))}}function Ht(i,o,s,n){o=g(o);var t,e,r,a,l,c,d=0,p=i.length,h=p-1,u=o[0],f=_(u);if(f||1<p&&"string"==typeof u&&!y.checkClone&&jt.test(u))return i.each(function(t){var e=i.eq(t);f&&(o[0]=u.call(this,t,e.html())),Ht(e,o,s,n)});if(p&&(e=(t=_t(o,i[0].ownerDocument,!1,i,n)).firstChild,1===t.childNodes.length&&(t=e),e||n)){for(a=(r=C.map(gt(t,"script"),qt)).length;d<p;d++)l=t,d!==h&&(l=C.clone(l,!0,!0),a&&C.merge(r,gt(l,"script"))),s.call(i[d],l,d);if(a)for(c=r[r.length-1].ownerDocument,C.map(r,Nt),d=0;d<a;d++)l=r[d],ft.test(l.type||"")&&!G.access(l,"globalEval")&&C.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?C._evalUrl&&!l.noModule&&C._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):b(l.textContent.replace(Et,""),l,c))}return i}function Ot(t,e,i){for(var o,s=e?C.filter(e,t):t,n=0;null!=(o=s[n]);n++)i||1!==o.nodeType||C.cleanData(gt(o)),o.parentNode&&(i&&st(o)&&vt(gt(o,"script")),o.parentNode.removeChild(o));return t}C.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var o,s,n,r,a,l,c,d=t.cloneNode(!0),p=st(t);if(!(y.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||C.isXMLDoc(t)))for(r=gt(d),o=0,s=(n=gt(t)).length;o<s;o++)a=n[o],l=r[o],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&ht.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(i)for(n=n||gt(t),r=r||gt(d),o=0,s=n.length;o<s;o++)Pt(n[o],r[o]);else Pt(t,d);return 0<(r=gt(d,"script")).length&&vt(r,!p&&gt(t,"script")),d},cleanData:function(t){for(var e,i,o,s=C.event.special,n=0;void 0!==(i=t[n]);n++)if(V(i)){if(e=i[G.expando]){if(e.events)for(o in e.events)s[o]?C.event.remove(i,o):C.removeEvent(i,o,e.handle);i[G.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),C.fn.extend({detach:function(t){return Ot(this,t,!0)},remove:function(t){return Ot(this,t)},text:function(t){return z(this,function(t){return void 0===t?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Ht(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Dt(this,t).appendChild(t)})},prepend:function(){return Ht(this,arguments,function(t){var e;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(e=Dt(this,t)).insertBefore(t,e.firstChild)})},before:function(){return Ht(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Ht(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(C.cleanData(gt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return C.clone(this,t,e)})},html:function(t){return z(this,function(t){var e=this[0]||{},i=0,o=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!At.test(t)&&!mt[(ut.exec(t)||["",""])[1].toLowerCase()]){t=C.htmlPrefilter(t);try{for(;i<o;i++)1===(e=this[i]||{}).nodeType&&(C.cleanData(gt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var i=[];return Ht(this,arguments,function(t){var e=this.parentNode;C.inArray(this,i)<0&&(C.cleanData(gt(this)),e&&e.replaceChild(t,this))},i)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,r){C.fn[t]=function(t){for(var e,i=[],o=C(t),s=o.length-1,n=0;n<=s;n++)e=n===s?this:this.clone(!0),C(o[n])[r](e),l.apply(i,e.get());return this.pushStack(i)}});function Mt(t,e,i){var o,s,n={};for(s in e)n[s]=t.style[s],t.style[s]=e[s];for(s in o=i.call(t),e)t.style[s]=n[s];return o}var Lt,Ft,It,Wt,zt,Rt,Bt,Ut,Xt=new RegExp("^("+tt+")(?!px)[a-z%]+$","i"),Vt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=k),e.getComputedStyle(t)},Yt=new RegExp(it.join("|"),"i");function Gt(){var t;Ut&&(Bt.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ut.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ot.appendChild(Bt).appendChild(Ut),t=k.getComputedStyle(Ut),Lt="1%"!==t.top,Rt=12===Kt(t.marginLeft),Ut.style.right="60%",Wt=36===Kt(t.right),Ft=36===Kt(t.width),Ut.style.position="absolute",It=12===Kt(Ut.offsetWidth/3),ot.removeChild(Bt),Ut=null)}function Kt(t){return Math.round(parseFloat(t))}function Qt(t,e,i){var o,s,n,r,a=t.style;return(i=i||Vt(t))&&(""!==(r=i.getPropertyValue(e)||i[e])||st(t)||(r=C.style(t,e)),!y.pixelBoxStyles()&&Xt.test(r)&&Yt.test(e)&&(o=a.width,s=a.minWidth,n=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=o,a.minWidth=s,a.maxWidth=n)),void 0!==r?r+"":r}function Jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Bt=T.createElement("div"),(Ut=T.createElement("div")).style&&(Ut.style.backgroundClip="content-box",Ut.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Ut.style.backgroundClip,C.extend(y,{boxSizingReliable:function(){return Gt(),Ft},pixelBoxStyles:function(){return Gt(),Wt},pixelPosition:function(){return Gt(),Lt},reliableMarginLeft:function(){return Gt(),Rt},scrollboxSize:function(){return Gt(),It},reliableTrDimensions:function(){var t,e,i,o;return null==zt&&(t=T.createElement("table"),e=T.createElement("tr"),i=T.createElement("div"),t.style.cssText="position:absolute;left:-11111px",e.style.height="1px",i.style.height="9px",ot.appendChild(t).appendChild(e).appendChild(i),o=k.getComputedStyle(e),zt=3<parseInt(o.height),ot.removeChild(t)),zt}}));var Zt=["Webkit","Moz","ms"],te=T.createElement("div").style,ee={};function ie(t){var e=C.cssProps[t]||ee[t];return e||(t in te?t:ee[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=Zt.length;i--;)if((t=Zt[i]+e)in te)return t}(t)||t)}var oe=/^(none|table(?!-c[ea]).+)/,se=/^--/,ne={position:"absolute",visibility:"hidden",display:"block"},re={letterSpacing:"0",fontWeight:"400"};function ae(t,e,i){var o=et.exec(e);return o?Math.max(0,o[2]-(i||0))+(o[3]||"px"):e}function le(t,e,i,o,s,n){var r="width"===e?1:0,a=0,l=0;if(i===(o?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=C.css(t,i+it[r],!0,s)),o?("content"===i&&(l-=C.css(t,"padding"+it[r],!0,s)),"margin"!==i&&(l-=C.css(t,"border"+it[r]+"Width",!0,s))):(l+=C.css(t,"padding"+it[r],!0,s),"padding"!==i?l+=C.css(t,"border"+it[r]+"Width",!0,s):a+=C.css(t,"border"+it[r]+"Width",!0,s));return!o&&0<=n&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-n-l-a-.5))||0),l}function ce(t,e,i){var o=Vt(t),s=(!y.boxSizingReliable()||i)&&"border-box"===C.css(t,"boxSizing",!1,o),n=s,r=Qt(t,e,o),a="offset"+e[0].toUpperCase()+e.slice(1);if(Xt.test(r)){if(!i)return r;r="auto"}return(!y.boxSizingReliable()&&s||!y.reliableTrDimensions()&&$(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===C.css(t,"display",!1,o))&&t.getClientRects().length&&(s="border-box"===C.css(t,"boxSizing",!1,o),(n=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+le(t,e,i||(s?"border":"content"),n,o,r)+"px"}function de(t,e,i,o,s){return new de.prototype.init(t,e,i,o,s)}C.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Qt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,o){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,n,r,a=X(e),l=se.test(e),c=t.style;if(l||(e=ie(a)),r=C.cssHooks[e]||C.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(s=r.get(t,!1,o))?s:c[e];"string"===(n=typeof i)&&(s=et.exec(i))&&s[1]&&(i=at(t,e,s),n="number"),null!=i&&i==i&&("number"!==n||l||(i+=s&&s[3]||(C.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,o))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,o){var s,n,r,a=X(e);return se.test(e)||(e=ie(a)),(r=C.cssHooks[e]||C.cssHooks[a])&&"get"in r&&(s=r.get(t,!0,i)),void 0===s&&(s=Qt(t,e,o)),"normal"===s&&e in re&&(s=re[e]),""===i||i?(n=parseFloat(s),!0===i||isFinite(n)?n||0:s):s}}),C.each(["height","width"],function(t,l){C.cssHooks[l]={get:function(t,e,i){if(e)return!oe.test(C.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ce(t,l,i):Mt(t,ne,function(){return ce(t,l,i)})},set:function(t,e,i){var o,s=Vt(t),n=!y.scrollboxSize()&&"absolute"===s.position,r=(n||i)&&"border-box"===C.css(t,"boxSizing",!1,s),a=i?le(t,l,i,r,s):0;return r&&n&&(a-=Math.ceil(t["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(s[l])-le(t,l,"border",!1,s)-.5)),a&&(o=et.exec(e))&&"px"!==(o[3]||"px")&&(t.style[l]=e,e=C.css(t,l)),ae(0,e,a)}}}),C.cssHooks.marginLeft=Jt(y.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Qt(t,"marginLeft"))||t.getBoundingClientRect().left-Mt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(s,n){C.cssHooks[s+n]={expand:function(t){for(var e=0,i={},o="string"==typeof t?t.split(" "):[t];e<4;e++)i[s+it[e]+n]=o[e]||o[e-2]||o[0];return i}},"margin"!==s&&(C.cssHooks[s+n].set=ae)}),C.fn.extend({css:function(t,e){return z(this,function(t,e,i){var o,s,n={},r=0;if(Array.isArray(e)){for(o=Vt(t),s=e.length;r<s;r++)n[e[r]]=C.css(t,e[r],!1,o);return n}return void 0!==i?C.style(t,e,i):C.css(t,e)},t,e,1<arguments.length)}}),(C.Tween=de).prototype={constructor:de,init:function(t,e,i,o,s,n){this.elem=t,this.prop=i,this.easing=s||C.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=o,this.unit=n||(C.cssNumber[i]?"":"px")},cur:function(){var t=de.propHooks[this.prop];return t&&t.get?t.get(this):de.propHooks._default.get(this)},run:function(t){var e,i=de.propHooks[this.prop];return this.options.duration?this.pos=e=C.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):de.propHooks._default.set(this),this}},de.prototype.init.prototype=de.prototype,de.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=C.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){C.fx.step[t.prop]?C.fx.step[t.prop](t):1!==t.elem.nodeType||!C.cssHooks[t.prop]&&null==t.elem.style[ie(t.prop)]?t.elem[t.prop]=t.now:C.style(t.elem,t.prop,t.now+t.unit)}}},de.propHooks.scrollTop=de.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},C.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},C.fx=de.prototype.init,C.fx.step={};var pe,he,ue,fe,me=/^(?:toggle|show|hide)$/,ge=/queueHooks$/;function ve(){he&&(!1===T.hidden&&k.requestAnimationFrame?k.requestAnimationFrame(ve):k.setTimeout(ve,C.fx.interval),C.fx.tick())}function ye(){return k.setTimeout(function(){pe=void 0}),pe=Date.now()}function _e(t,e){var i,o=0,s={height:t};for(e=e?1:0;o<4;o+=2-e)s["margin"+(i=it[o])]=s["padding"+i]=t;return e&&(s.opacity=s.width=t),s}function be(t,e,i){for(var o,s=(xe.tweeners[e]||[]).concat(xe.tweeners["*"]),n=0,r=s.length;n<r;n++)if(o=s[n].call(i,e,t))return o}function xe(n,t,e){var i,r,o=0,s=xe.prefilters.length,a=C.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=pe||ye(),e=Math.max(0,c.startTime+c.duration-t),i=1-(e/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(n,[c,i,e]),i<1&&s?e:(s||a.notifyWith(n,[c,1,0]),a.resolveWith(n,[c]),!1)},c=a.promise({elem:n,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},e),originalProperties:t,originalOptions:e,startTime:pe||ye(),duration:e.duration,tweens:[],createTween:function(t,e){var i=C.Tween(n,c.opts,t,e,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var e=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;e<i;e++)c.tweens[e].run(1);return t?(a.notifyWith(n,[c,1,0]),a.resolveWith(n,[c,t])):a.rejectWith(n,[c,t]),this}}),d=c.props;for(!function(t,e){var i,o,s,n,r;for(i in t)if(s=e[o=X(i)],n=t[i],Array.isArray(n)&&(s=n[1],n=t[i]=n[0]),i!==o&&(t[o]=n,delete t[i]),(r=C.cssHooks[o])&&"expand"in r)for(i in n=r.expand(n),delete t[o],n)i in t||(t[i]=n[i],e[i]=s);else e[o]=s}(d,c.opts.specialEasing);o<s;o++)if(i=xe.prefilters[o].call(c,n,d,c.opts))return _(i.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return C.map(d,be,c),_(c.opts.start)&&c.opts.start.call(n,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(l,{elem:n,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(xe,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return at(i.elem,t,et.exec(e),i),i}]},tweener:function(t,e){for(var i,o=0,s=(t=_(t)?(e=t,["*"]):t.match(H)).length;o<s;o++)i=t[o],xe.tweeners[i]=xe.tweeners[i]||[],xe.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var o,s,n,r,a,l,c,d,p="width"in e||"height"in e,h=this,u={},f=t.style,m=t.nodeType&&rt(t),g=G.get(t,"fxshow");for(o in i.queue||(null==(r=C._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,C.queue(t,"fx").length||r.empty.fire()})})),e)if(s=e[o],me.test(s)){if(delete e[o],n=n||"toggle"===s,s===(m?"hide":"show")){if("show"!==s||!g||void 0===g[o])continue;m=!0}u[o]=g&&g[o]||C.style(t,o)}if((l=!C.isEmptyObject(e))||!C.isEmptyObject(u))for(o in p&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=G.get(t,"display")),"none"===(d=C.css(t,"display"))&&(c?d=c:(ct([t],!0),c=t.style.display||c,d=C.css(t,"display"),ct([t]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===C.css(t,"float")&&(l||(h.done(function(){f.display=c}),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,u)l||(g?"hidden"in g&&(m=g.hidden):g=G.access(t,"fxshow",{display:c}),n&&(g.hidden=!m),m&&ct([t],!0),h.done(function(){for(o in m||ct([t]),G.remove(t,"fxshow"),u)C.style(t,o,u[o])})),l=be(m?g[o]:0,o,h),o in g||(g[o]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?xe.prefilters.unshift(t):xe.prefilters.push(t)}}),C.speed=function(t,e,i){var o=t&&"object"==typeof t?C.extend({},t):{complete:i||!i&&e||_(t)&&t,duration:t,easing:i&&e||e&&!_(e)&&e};return C.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in C.fx.speeds?o.duration=C.fx.speeds[o.duration]:o.duration=C.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){_(o.old)&&o.old.call(this),o.queue&&C.dequeue(this,o.queue)},o},C.fn.extend({fadeTo:function(t,e,i,o){return this.filter(rt).css("opacity",0).show().end().animate({opacity:e},t,i,o)},animate:function(e,t,i,o){function s(){var t=xe(this,C.extend({},e),r);(n||G.get(this,"finish"))&&t.stop(!0)}var n=C.isEmptyObject(e),r=C.speed(t,i,o);return s.finish=s,n||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(s,t,n){function r(t){var e=t.stop;delete t.stop,e(n)}return"string"!=typeof s&&(n=t,t=s,s=void 0),t&&this.queue(s||"fx",[]),this.each(function(){var t=!0,e=null!=s&&s+"queueHooks",i=C.timers,o=G.get(this);if(e)o[e]&&o[e].stop&&r(o[e]);else for(e in o)o[e]&&o[e].stop&&ge.test(e)&&r(o[e]);for(e=i.length;e--;)i[e].elem!==this||null!=s&&i[e].queue!==s||(i[e].anim.stop(n),t=!1,i.splice(e,1));!t&&n||C.dequeue(this,s)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var t,e=G.get(this),i=e[r+"queue"],o=e[r+"queueHooks"],s=C.timers,n=i?i.length:0;for(e.finish=!0,C.queue(this,r,[]),o&&o.stop&&o.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===r&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<n;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete e.finish})}}),C.each(["toggle","show","hide"],function(t,o){var s=C.fn[o];C.fn[o]=function(t,e,i){return null==t||"boolean"==typeof t?s.apply(this,arguments):this.animate(_e(o,!0),t,e,i)}}),C.each({slideDown:_e("show"),slideUp:_e("hide"),slideToggle:_e("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,o){C.fn[t]=function(t,e,i){return this.animate(o,t,e,i)}}),C.timers=[],C.fx.tick=function(){var t,e=0,i=C.timers;for(pe=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||C.fx.stop(),pe=void 0},C.fx.timer=function(t){C.timers.push(t),C.fx.start()},C.fx.interval=13,C.fx.start=function(){he||(he=!0,ve())},C.fx.stop=function(){he=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(o,t){return o=C.fx&&C.fx.speeds[o]||o,t=t||"fx",this.queue(t,function(t,e){var i=k.setTimeout(t,o);e.stop=function(){k.clearTimeout(i)}})},ue=T.createElement("input"),fe=T.createElement("select").appendChild(T.createElement("option")),ue.type="checkbox",y.checkOn=""!==ue.value,y.optSelected=fe.selected,(ue=T.createElement("input")).value="t",ue.type="radio",y.radioValue="t"===ue.value;var we,ke=C.expr.attrHandle;C.fn.extend({attr:function(t,e){return z(this,C.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){C.removeAttr(this,t)})}}),C.extend({attr:function(t,e,i){var o,s,n=t.nodeType;if(3!==n&&8!==n&&2!==n)return void 0===t.getAttribute?C.prop(t,e,i):(1===n&&C.isXMLDoc(t)||(s=C.attrHooks[e.toLowerCase()]||(C.expr.match.bool.test(e)?we:void 0)),void 0!==i?null===i?void C.removeAttr(t,e):s&&"set"in s&&void 0!==(o=s.set(t,i,e))?o:(t.setAttribute(e,i+""),i):!(s&&"get"in s&&null!==(o=s.get(t,e)))&&null==(o=C.find.attr(t,e))?void 0:o)},attrHooks:{type:{set:function(t,e){if(!y.radioValue&&"radio"===e&&$(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,o=0,s=e&&e.match(H);if(s&&1===t.nodeType)for(;i=s[o++];)t.removeAttribute(i)}}),we={set:function(t,e,i){return!1===e?C.removeAttr(t,i):t.setAttribute(i,i),i}},C.each(C.expr.match.bool.source.match(/\w+/g),function(t,e){var r=ke[e]||C.find.attr;ke[e]=function(t,e,i){var o,s,n=e.toLowerCase();return i||(s=ke[n],ke[n]=o,o=null!=r(t,e,i)?n:null,ke[n]=s),o}});var Te=/^(?:input|select|textarea|button)$/i,Ce=/^(?:a|area)$/i;function Se(t){return(t.match(H)||[]).join(" ")}function $e(t){return t.getAttribute&&t.getAttribute("class")||""}function Ae(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}C.fn.extend({prop:function(t,e){return z(this,C.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[C.propFix[t]||t]})}}),C.extend({prop:function(t,e,i){var o,s,n=t.nodeType;if(3!==n&&8!==n&&2!==n)return 1===n&&C.isXMLDoc(t)||(e=C.propFix[e]||e,s=C.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(o=s.set(t,i,e))?o:t[e]=i:s&&"get"in s&&null!==(o=s.get(t,e))?o:t[e]},propHooks:{tabIndex:{get:function(t){var e=C.find.attr(t,"tabindex");return e?parseInt(e,10):Te.test(t.nodeName)||Ce.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(C.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(e){var t,i,o,s,n,r,a,l=0;if(_(e))return this.each(function(t){C(this).addClass(e.call(this,t,$e(this)))});if((t=Ae(e)).length)for(;i=this[l++];)if(s=$e(i),o=1===i.nodeType&&" "+Se(s)+" "){for(r=0;n=t[r++];)o.indexOf(" "+n+" ")<0&&(o+=n+" ");s!==(a=Se(o))&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,o,s,n,r,a,l=0;if(_(e))return this.each(function(t){C(this).removeClass(e.call(this,t,$e(this)))});if(!arguments.length)return this.attr("class","");if((t=Ae(e)).length)for(;i=this[l++];)if(s=$e(i),o=1===i.nodeType&&" "+Se(s)+" "){for(r=0;n=t[r++];)for(;-1<o.indexOf(" "+n+" ");)o=o.replace(" "+n+" "," ");s!==(a=Se(o))&&i.setAttribute("class",a)}return this},toggleClass:function(s,e){var n=typeof s,r="string"==n||Array.isArray(s);return"boolean"==typeof e&&r?e?this.addClass(s):this.removeClass(s):_(s)?this.each(function(t){C(this).toggleClass(s.call(this,t,$e(this),e),e)}):this.each(function(){var t,e,i,o;if(r)for(e=0,i=C(this),o=Ae(s);t=o[e++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==s&&"boolean"!=n||((t=$e(this))&&G.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",!t&&!1!==s&&G.get(this,"__className__")||""))})},hasClass:function(t){for(var e,i=0,o=" "+t+" ";e=this[i++];)if(1===e.nodeType&&-1<(" "+Se($e(e))+" ").indexOf(o))return!0;return!1}});var je=/\r/g;C.fn.extend({val:function(i){var o,t,s,e=this[0];return arguments.length?(s=_(i),this.each(function(t){var e;1===this.nodeType&&(null==(e=s?i.call(this,t,C(this).val()):i)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=C.map(e,function(t){return null==t?"":t+""})),(o=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in o&&void 0!==o.set(this,e,"value")||(this.value=e))})):e?(o=C.valHooks[e.type]||C.valHooks[e.nodeName.toLowerCase()])&&"get"in o&&void 0!==(t=o.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(je,""):null==t?"":t:void 0}}),C.extend({valHooks:{option:{get:function(t){var e=C.find.attr(t,"value");return null!=e?e:Se(C.text(t))}},select:{get:function(t){for(var e,i,o=t.options,s=t.selectedIndex,n="select-one"===t.type,r=n?null:[],a=n?s+1:o.length,l=s<0?a:n?s:0;l<a;l++)if(((i=o[l]).selected||l===s)&&!i.disabled&&(!i.parentNode.disabled||!$(i.parentNode,"optgroup"))){if(e=C(i).val(),n)return e;r.push(e)}return r},set:function(t,e){for(var i,o,s=t.options,n=C.makeArray(e),r=s.length;r--;)((o=s[r]).selected=-1<C.inArray(C.valHooks.option.get(o),n))&&(i=!0);return i||(t.selectedIndex=-1),n}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<C.inArray(C(t).val(),e)}},y.checkOn||(C.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),y.focusin="onfocusin"in k;function Ee(t){t.stopPropagation()}var De=/^(?:focusinfocus|focusoutblur)$/;C.extend(C.event,{trigger:function(t,e,i,o){var s,n,r,a,l,c,d,p=[i||T],h=v.call(t,"type")?t.type:t,u=v.call(t,"namespace")?t.namespace.split("."):[],f=d=n=i=i||T;if(3!==i.nodeType&&8!==i.nodeType&&!De.test(h+C.event.triggered)&&(-1<h.indexOf(".")&&(h=(u=h.split(".")).shift(),u.sort()),a=h.indexOf(":")<0&&"on"+h,(t=t[C.expando]?t:new C.Event(h,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=u.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+u.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:C.makeArray(e,[t]),c=C.event.special[h]||{},o||!c.trigger||!1!==c.trigger.apply(i,e))){if(!o&&!c.noBubble&&!m(i)){for(r=c.delegateType||h,De.test(r+h)||(f=f.parentNode);f;f=f.parentNode)p.push(f),n=f;n===(i.ownerDocument||T)&&p.push(n.defaultView||n.parentWindow||k)}for(s=0;(f=p[s++])&&!t.isPropagationStopped();)d=f,t.type=1<s?r:c.bindType||h,(l=(G.get(f,"events")||Object.create(null))[t.type]&&G.get(f,"handle"))&&l.apply(f,e),(l=a&&f[a])&&l.apply&&V(f)&&(t.result=l.apply(f,e),!1===t.result&&t.preventDefault());return t.type=h,o||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),e)||!V(i)||a&&_(i[h])&&!m(i)&&((n=i[a])&&(i[a]=null),C.event.triggered=h,t.isPropagationStopped()&&d.addEventListener(h,Ee),i[h](),t.isPropagationStopped()&&d.removeEventListener(h,Ee),C.event.triggered=void 0,n&&(i[a]=n)),t.result}},simulate:function(t,e,i){var o=C.extend(new C.Event,i,{type:t,isSimulated:!0});C.event.trigger(o,null,e)}}),C.fn.extend({trigger:function(t,e){return this.each(function(){C.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return C.event.trigger(t,e,i,!0)}}),y.focusin||C.each({focus:"focusin",blur:"focusout"},function(i,o){function s(t){C.event.simulate(o,t.target,C.event.fix(t))}C.event.special[o]={setup:function(){var t=this.ownerDocument||this.document||this,e=G.access(t,o);e||t.addEventListener(i,s,!0),G.access(t,o,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,e=G.access(t,o)-1;e?G.access(t,o,e):(t.removeEventListener(i,s,!0),G.remove(t,o))}}});var qe=k.location,Ne={guid:Date.now()},Pe=/\?/;C.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new k.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+t),e};var He=/\[\]$/,Oe=/\r?\n/g,Me=/^(?:submit|button|image|reset|file)$/i,Le=/^(?:input|select|textarea|keygen)/i;C.param=function(t,e){function i(t,e){var i=_(e)?e():e;s[s.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)}var o,s=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!C.isPlainObject(t))C.each(t,function(){i(this.name,this.value)});else for(o in t)!function i(o,t,s,n){var e;if(Array.isArray(t))C.each(t,function(t,e){s||He.test(o)?n(o,e):i(o+"["+("object"==typeof e&&null!=e?t:"")+"]",e,s,n)});else if(s||"object"!==x(t))n(o,t);else for(e in t)i(o+"["+e+"]",t[e],s,n)}(o,t[o],e,i);return s.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=C.prop(this,"elements");return t?C.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!C(this).is(":disabled")&&Le.test(this.nodeName)&&!Me.test(t)&&(this.checked||!ht.test(t))}).map(function(t,e){var i=C(this).val();return null==i?null:Array.isArray(i)?C.map(i,function(t){return{name:e.name,value:t.replace(Oe,"\r\n")}}):{name:e.name,value:i.replace(Oe,"\r\n")}}).get()}});var Fe=/%20/g,Ie=/#.*$/,We=/([?&])_=[^&]*/,ze=/^(.*?):[ \t]*([^\r\n]*)$/gm,Re=/^(?:GET|HEAD)$/,Be=/^\/\//,Ue={},Xe={},Ve="*/".concat("*"),Ye=T.createElement("a");function Ge(n){return function(t,e){"string"!=typeof t&&(e=t,t="*");var i,o=0,s=t.toLowerCase().match(H)||[];if(_(e))for(;i=s[o++];)"+"===i[0]?(i=i.slice(1)||"*",(n[i]=n[i]||[]).unshift(e)):(n[i]=n[i]||[]).push(e)}}function Ke(e,s,n,r){var a={},l=e===Xe;function c(t){var o;return a[t]=!0,C.each(e[t]||[],function(t,e){var i=e(s,n,r);return"string"!=typeof i||l||a[i]?l?!(o=i):void 0:(s.dataTypes.unshift(i),c(i),!1)}),o}return c(s.dataTypes[0])||!a["*"]&&c("*")}function Qe(t,e){var i,o,s=C.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((s[i]?t:o=o||{})[i]=e[i]);return o&&C.extend(!0,t,o),t}Ye.href=qe.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:qe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(qe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ve,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Qe(Qe(t,C.ajaxSettings),e):Qe(C.ajaxSettings,t)},ajaxPrefilter:Ge(Ue),ajaxTransport:Ge(Xe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var d,p,h,i,u,o,f,m,s,n,g=C.ajaxSetup({},e),v=g.context||g,y=g.context&&(v.nodeType||v.jquery)?C(v):C.event,_=C.Deferred(),b=C.Callbacks("once memory"),x=g.statusCode||{},r={},a={},l="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(f){if(!i)for(i={};e=ze.exec(h);)i[e[1].toLowerCase()+" "]=(i[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=i[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return f?h:null},setRequestHeader:function(t,e){return null==f&&(t=a[t.toLowerCase()]=a[t.toLowerCase()]||t,r[t]=e),this},overrideMimeType:function(t){return null==f&&(g.mimeType=t),this},statusCode:function(t){var e;if(t)if(f)w.always(t[w.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||l;return d&&d.abort(e),c(0,e),this}};if(_.promise(w),g.url=((t||g.url||qe.href)+"").replace(Be,qe.protocol+"//"),g.type=e.method||e.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(H)||[""],null==g.crossDomain){o=T.createElement("a");try{o.href=g.url,o.href=o.href,g.crossDomain=Ye.protocol+"//"+Ye.host!=o.protocol+"//"+o.host}catch(t){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=C.param(g.data,g.traditional)),Ke(Ue,g,e,w),f)return w;for(s in(m=C.event&&g.global)&&0==C.active++&&C.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Re.test(g.type),p=g.url.replace(Ie,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Fe,"+")):(n=g.url.slice(p.length),g.data&&(g.processData||"string"==typeof g.data)&&(p+=(Pe.test(p)?"&":"?")+g.data,delete g.data),!1===g.cache&&(p=p.replace(We,"$1"),n=(Pe.test(p)?"&":"?")+"_="+Ne.guid+++n),g.url=p+n),g.ifModified&&(C.lastModified[p]&&w.setRequestHeader("If-Modified-Since",C.lastModified[p]),C.etag[p]&&w.setRequestHeader("If-None-Match",C.etag[p])),(g.data&&g.hasContent&&!1!==g.contentType||e.contentType)&&w.setRequestHeader("Content-Type",g.contentType),w.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Ve+"; q=0.01":""):g.accepts["*"]),g.headers)w.setRequestHeader(s,g.headers[s]);if(g.beforeSend&&(!1===g.beforeSend.call(v,w,g)||f))return w.abort();if(l="abort",b.add(g.complete),w.done(g.success),w.fail(g.error),d=Ke(Xe,g,e,w)){if(w.readyState=1,m&&y.trigger("ajaxSend",[w,g]),f)return w;g.async&&0<g.timeout&&(u=k.setTimeout(function(){w.abort("timeout")},g.timeout));try{f=!1,d.send(r,c)}catch(t){if(f)throw t;c(-1,t)}}else c(-1,"No Transport");function c(t,e,i,o){var s,n,r,a,l,c=e;f||(f=!0,u&&k.clearTimeout(u),d=void 0,h=o||"",w.readyState=0<t?4:0,s=200<=t&&t<300||304===t,i&&(a=function(t,e,i){for(var o,s,n,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=t.mimeType||e.getResponseHeader("Content-Type"));if(o)for(s in a)if(a[s]&&a[s].test(o)){l.unshift(s);break}if(l[0]in i)n=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){n=s;break}r=r||s}n=n||r}if(n)return n!==l[0]&&l.unshift(n),i[n]}(g,w,i)),!s&&-1<C.inArray("script",g.dataTypes)&&(g.converters["text script"]=function(){}),a=function(t,e,i,o){var s,n,r,a,l,c={},d=t.dataTypes.slice();if(d[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(n=d.shift();n;)if(t.responseFields[n]&&(i[t.responseFields[n]]=e),!l&&o&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=n,n=d.shift())if("*"===n)n=l;else if("*"!==l&&l!==n){if(!(r=c[l+" "+n]||c["* "+n]))for(s in c)if((a=s.split(" "))[1]===n&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[s]:!0!==c[s]&&(n=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+n}}}return{state:"success",data:e}}(g,a,w,s),s?(g.ifModified&&((l=w.getResponseHeader("Last-Modified"))&&(C.lastModified[p]=l),(l=w.getResponseHeader("etag"))&&(C.etag[p]=l)),204===t||"HEAD"===g.type?c="nocontent":304===t?c="notmodified":(c=a.state,n=a.data,s=!(r=a.error))):(r=c,!t&&c||(c="error",t<0&&(t=0))),w.status=t,w.statusText=(e||c)+"",s?_.resolveWith(v,[n,c,w]):_.rejectWith(v,[w,c,r]),w.statusCode(x),x=void 0,m&&y.trigger(s?"ajaxSuccess":"ajaxError",[w,g,s?n:r]),b.fireWith(v,[w,c]),m&&(y.trigger("ajaxComplete",[w,g]),--C.active||C.event.trigger("ajaxStop")))}return w},getJSON:function(t,e,i){return C.get(t,e,i,"json")},getScript:function(t,e){return C.get(t,void 0,e,"script")}}),C.each(["get","post"],function(t,s){C[s]=function(t,e,i,o){return _(e)&&(o=o||i,i=e,e=void 0),C.ajax(C.extend({url:t,type:s,dataType:o,data:e,success:i},C.isPlainObject(t)&&t))}}),C.ajaxPrefilter(function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")}),C._evalUrl=function(t,e,i){return C.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){C.globalEval(t,e,i)}})},C.fn.extend({wrapAll:function(t){var e;return this[0]&&(_(t)&&(t=t.call(this[0])),e=C(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(i){return _(i)?this.each(function(t){C(this).wrapInner(i.call(this,t))}):this.each(function(){var t=C(this),e=t.contents();e.length?e.wrapAll(i):t.append(i)})},wrap:function(e){var i=_(e);return this.each(function(t){C(this).wrapAll(i?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(t){return!C.expr.pseudos.visible(t)},C.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new k.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},Ze=C.ajaxSettings.xhr();y.cors=!!Ze&&"withCredentials"in Ze,y.ajax=Ze=!!Ze,C.ajaxTransport(function(s){var n,r;if(y.cors||Ze&&!s.crossDomain)return{send:function(t,e){var i,o=s.xhr();if(o.open(s.type,s.url,s.async,s.username,s.password),s.xhrFields)for(i in s.xhrFields)o[i]=s.xhrFields[i];for(i in s.mimeType&&o.overrideMimeType&&o.overrideMimeType(s.mimeType),s.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)o.setRequestHeader(i,t[i]);n=function(t){return function(){n&&(n=r=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===t?o.abort():"error"===t?"number"!=typeof o.status?e(0,"error"):e(o.status,o.statusText):e(Je[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=n(),r=o.onerror=o.ontimeout=n("error"),void 0!==o.onabort?o.onabort=r:o.onreadystatechange=function(){4===o.readyState&&k.setTimeout(function(){n&&r()})},n=n("abort");try{o.send(s.hasContent&&s.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),C.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return C.globalEval(t),t}}}),C.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),C.ajaxTransport("script",function(i){var o,s;if(i.crossDomain||i.scriptAttrs)return{send:function(t,e){o=C("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",s=function(t){o.remove(),s=null,t&&e("error"===t.type?404:200,t.type)}),T.head.appendChild(o[0])},abort:function(){s&&s()}}});var ti,ei=[],ii=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=ei.pop()||C.expando+"_"+Ne.guid++;return this[t]=!0,t}}),C.ajaxPrefilter("json jsonp",function(t,e,i){var o,s,n,r=!1!==t.jsonp&&(ii.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&ii.test(t.data)&&"data");if(r||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=_(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,r?t[r]=t[r].replace(ii,"$1"+o):!1!==t.jsonp&&(t.url+=(Pe.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return n||C.error(o+" was not called"),n[0]},t.dataTypes[0]="json",s=k[o],k[o]=function(){n=arguments},i.always(function(){void 0===s?C(k).removeProp(o):k[o]=s,t[o]&&(t.jsonpCallback=e.jsonpCallback,ei.push(o)),n&&_(s)&&s(n[0]),n=s=void 0}),"script"}),y.createHTMLDocument=((ti=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),C.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(y.createHTMLDocument?((o=(e=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,e.head.appendChild(o)):e=T),n=!i&&[],(s=A.exec(t))?[e.createElement(s[1])]:(s=_t([t],e,n),n&&n.length&&C(n).remove(),C.merge([],s.childNodes)));var o,s,n},C.fn.load=function(t,e,i){var o,s,n,r=this,a=t.indexOf(" ");return-1<a&&(o=Se(t.slice(a)),t=t.slice(0,a)),_(e)?(i=e,e=void 0):e&&"object"==typeof e&&(s="POST"),0<r.length&&C.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done(function(t){n=arguments,r.html(o?C("<div>").append(C.parseHTML(t)).find(o):t)}).always(i&&function(t,e){r.each(function(){i.apply(this,n||[t.responseText,e,t])})}),this},C.expr.pseudos.animated=function(e){return C.grep(C.timers,function(t){return e===t.elem}).length},C.offset={setOffset:function(t,e,i){var o,s,n,r,a,l,c=C.css(t,"position"),d=C(t),p={};"static"===c&&(t.style.position="relative"),a=d.offset(),n=C.css(t,"top"),l=C.css(t,"left"),s=("absolute"===c||"fixed"===c)&&-1<(n+l).indexOf("auto")?(r=(o=d.position()).top,o.left):(r=parseFloat(n)||0,parseFloat(l)||0),_(e)&&(e=e.call(t,i,C.extend({},a))),null!=e.top&&(p.top=e.top-a.top+r),null!=e.left&&(p.left=e.left-a.left+s),"using"in e?e.using.call(t,p):("number"==typeof p.top&&(p.top+="px"),"number"==typeof p.left&&(p.left+="px"),d.css(p))}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){C.offset.setOffset(this,e,t)});var t,i,o=this[0];return o?o.getClientRects().length?(t=o.getBoundingClientRect(),i=o.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,o=this[0],s={top:0,left:0};if("fixed"===C.css(o,"position"))e=o.getBoundingClientRect();else{for(e=this.offset(),i=o.ownerDocument,t=o.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===C.css(t,"position");)t=t.parentNode;t&&t!==o&&1===t.nodeType&&((s=C(t).offset()).top+=C.css(t,"borderTopWidth",!0),s.left+=C.css(t,"borderLeftWidth",!0))}return{top:e.top-s.top-C.css(o,"marginTop",!0),left:e.left-s.left-C.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===C.css(t,"position");)t=t.offsetParent;return t||ot})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,s){var n="pageYOffset"===s;C.fn[e]=function(t){return z(this,function(t,e,i){var o;return m(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i?o?o[s]:t[e]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[e]=i)},e,t,arguments.length)}}),C.each(["top","left"],function(t,i){C.cssHooks[i]=Jt(y.pixelPosition,function(t,e){if(e)return e=Qt(t,i),Xt.test(e)?C(t).position()[i]+"px":e})}),C.each({Height:"height",Width:"width"},function(r,a){C.each({padding:"inner"+r,content:a,"":"outer"+r},function(o,n){C.fn[n]=function(t,e){var i=arguments.length&&(o||"boolean"!=typeof t),s=o||(!0===t||!0===e?"margin":"border");return z(this,function(t,e,i){var o;return m(t)?0===n.indexOf("outer")?t["inner"+r]:t.document.documentElement["client"+r]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+r],o["scroll"+r],t.body["offset"+r],o["offset"+r],o["client"+r])):void 0===i?C.css(t,e,s):C.style(t,e,i,s)},a,i?t:void 0,i)}})}),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){C.fn[e]=function(t){return this.on(e,t)}}),C.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,o){return this.on(e,t,i,o)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,i){C.fn[i]=function(t,e){return 0<arguments.length?this.on(i,null,t,e):this.trigger(i)}});var oi=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;C.proxy=function(t,e){var i,o,s;if("string"==typeof e&&(i=t[e],e=t,t=i),_(t))return o=a.call(arguments,2),(s=function(){return t.apply(e||this,o.concat(a.call(arguments)))}).guid=t.guid=t.guid||C.guid++,s},C.holdReady=function(t){t?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=$,C.isFunction=_,C.isWindow=m,C.camelCase=X,C.type=x,C.now=Date.now,C.isNumeric=function(t){var e=C.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},C.trim=function(t){return null==t?"":(t+"").replace(oi,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return C});var si=k.jQuery,ni=k.$;return C.noConflict=function(t){return k.$===C&&(k.$=ni),t&&k.jQuery===C&&(k.jQuery=si),C},void 0===t&&(k.jQuery=k.$=C),C}),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(c){"use strict";var s,r=window.Slick||{};s=0,(r=function(t,e){var i,o=this;o.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(t),appendDots:c(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,e){return c('<button type="button" />').text(e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},o.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(o,o.initials),o.activeBreakpoint=null,o.animType=null,o.animProp=null,o.breakpoints=[],o.breakpointSettings=[],o.cssTransitions=!1,o.focussed=!1,o.interrupted=!1,o.hidden="hidden",o.paused=!0,o.positionProp=null,o.respondTo=null,o.rowCount=1,o.shouldClick=!0,o.$slider=c(t),o.$slidesCache=null,o.transformType=null,o.transitionType=null,o.visibilityChange="visibilitychange",o.windowWidth=0,o.windowTimer=null,i=c(t).data("slick")||{},o.options=c.extend({},o.defaults,e,i),o.currentSlide=o.options.initialSlide,o.originalSettings=o.options,void 0!==document.mozHidden?(o.hidden="mozHidden",o.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(o.hidden="webkitHidden",o.visibilityChange="webkitvisibilitychange"),o.autoPlay=c.proxy(o.autoPlay,o),o.autoPlayClear=c.proxy(o.autoPlayClear,o),o.autoPlayIterator=c.proxy(o.autoPlayIterator,o),o.changeSlide=c.proxy(o.changeSlide,o),o.clickHandler=c.proxy(o.clickHandler,o),o.selectHandler=c.proxy(o.selectHandler,o),o.setPosition=c.proxy(o.setPosition,o),o.swipeHandler=c.proxy(o.swipeHandler,o),o.dragHandler=c.proxy(o.dragHandler,o),o.keyHandler=c.proxy(o.keyHandler,o),o.instanceUid=s++,o.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,o.registerBreakpoints(),o.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(t,e,i){var o=this;if("boolean"==typeof e)i=e,e=null;else if(e<0||e>=o.slideCount)return!1;o.unload(),"number"==typeof e?0===e&&0===o.$slides.length?c(t).appendTo(o.$slideTrack):i?c(t).insertBefore(o.$slides.eq(e)):c(t).insertAfter(o.$slides.eq(e)):!0===i?c(t).prependTo(o.$slideTrack):c(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each(function(t,e){c(e).attr("data-slick-index",t)}),o.$slidesCache=o.$slides,o.reinit()},r.prototype.animateHeight=function(){var t,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(t=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.animate({height:t},e.options.speed))},r.prototype.animateSlide=function(t,e){var i={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,e):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,e):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),c({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(t){t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate("+t+"px, 0px)":i[o.animType]="translate(0px,"+t+"px)",o.$slideTrack.css(i)},complete:function(){e&&e.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate3d("+t+"px, 0px, 0px)":i[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(i),e&&setTimeout(function(){o.disableTransition(),e.call()},o.options.speed))},r.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=c(t).not(this.$slider)),t},r.prototype.asNavFor=function(e){var t=this.getNavTarget();null!==t&&"object"==typeof t&&t.each(function(){var t=c(this).slick("getSlick");t.unslicked||t.slideHandler(e,!0)})},r.prototype.applyTransition=function(t){var e=this,i={};!1===e.options.fade?i[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:i[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,!1===e.options.fade?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},r.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0&&(t.direction=1))),t.slideHandler(e))},r.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=c(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=c(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var t,e,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),e=c("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)e.append(c("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=e.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,e){c(e).attr("data-slick-index",t).data("originalStyling",c(e).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?c('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),c("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},r.prototype.buildRows=function(){var t,e,i,o=this,s=document.createDocumentFragment(),n=o.$slider.children();if(0<o.options.rows){for(i=o.options.slidesPerRow*o.options.rows,e=Math.ceil(n.length/i),t=0;t<e;t++){for(var r=document.createElement("div"),a=0;a<o.options.rows;a++){for(var l=document.createElement("div"),c=0;c<o.options.slidesPerRow;c++){var d=t*i+(a*o.options.slidesPerRow+c);n.get(d)&&l.appendChild(n.get(d))}r.appendChild(l)}s.appendChild(r)}o.$slider.empty().append(s),o.$slider.children().children().children().css({width:100/o.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(t,e){var i,o,s,n=this,r=!1,a=n.$slider.width(),l=window.innerWidth||c(window).width();if("window"===n.respondTo?s=l:"slider"===n.respondTo?s=a:"min"===n.respondTo&&(s=Math.min(l,a)),n.options.responsive&&n.options.responsive.length&&null!==n.options.responsive){for(i in o=null,n.breakpoints)n.breakpoints.hasOwnProperty(i)&&(!1===n.originalSettings.mobileFirst?s<n.breakpoints[i]&&(o=n.breakpoints[i]):s>n.breakpoints[i]&&(o=n.breakpoints[i]));null!==o?null!==n.activeBreakpoint&&o===n.activeBreakpoint&&!e||(n.activeBreakpoint=o,"unslick"===n.breakpointSettings[o]?n.unslick(o):(n.options=c.extend({},n.originalSettings,n.breakpointSettings[o]),!0===t&&(n.currentSlide=n.options.initialSlide),n.refresh(t)),r=o):null!==n.activeBreakpoint&&(n.activeBreakpoint=null,n.options=n.originalSettings,!0===t&&(n.currentSlide=n.options.initialSlide),n.refresh(t),r=o),t||!1===r||n.$slider.trigger("breakpoint",[n,r])}},r.prototype.changeSlide=function(t,e){var i,o,s=this,n=c(t.currentTarget);switch(n.is("a")&&t.preventDefault(),n.is("li")||(n=n.closest("li")),i=s.slideCount%s.options.slidesToScroll!=0?0:(s.slideCount-s.currentSlide)%s.options.slidesToScroll,t.data.message){case"previous":o=0==i?s.options.slidesToScroll:s.options.slidesToShow-i,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide-o,!1,e);break;case"next":o=0==i?s.options.slidesToScroll:i,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide+o,!1,e);break;case"index":var r=0===t.data.index?0:t.data.index||n.index()*s.options.slidesToScroll;s.slideHandler(s.checkNavigable(r),!1,e),n.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(t){var e=this.getNavigableIndexes(),i=0;if(t>e[e.length-1])t=e[e.length-1];else for(var o in e){if(t<e[o]){t=i;break}i=e[o]}return t},r.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(c("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",c.proxy(t.interrupt,t,!0)).off("mouseleave.slick",c.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),c(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().off("click.slick",t.selectHandler),c(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),c(window).off("resize.slick.slick-"+t.instanceUid,t.resize),c("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),c(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},r.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.cleanUpRows=function(){var t;0<this.options.rows&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},r.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},r.prototype.destroy=function(t){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),c(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove()),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove()),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,t||e.$slider.trigger("destroy",[e])},r.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},r.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},r.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},r.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var e=c(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=e.is(":focus"),i.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var t=this,e=0,i=0,o=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++o;else for(;e<t.slideCount;)++o,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)o=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++o,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else o=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return o-1},r.prototype.getLeft=function(t){var e,i,o,s,n=this,r=0;return n.slideOffset=0,i=n.$slides.first().outerHeight(!0),!0===n.options.infinite?(n.slideCount>n.options.slidesToShow&&(n.slideOffset=n.slideWidth*n.options.slidesToShow*-1,s=-1,!0===n.options.vertical&&!0===n.options.centerMode&&(2===n.options.slidesToShow?s=-1.5:1===n.options.slidesToShow&&(s=-2)),r=i*n.options.slidesToShow*s),n.slideCount%n.options.slidesToScroll!=0&&t+n.options.slidesToScroll>n.slideCount&&n.slideCount>n.options.slidesToShow&&(r=t>n.slideCount?(n.slideOffset=(n.options.slidesToShow-(t-n.slideCount))*n.slideWidth*-1,(n.options.slidesToShow-(t-n.slideCount))*i*-1):(n.slideOffset=n.slideCount%n.options.slidesToScroll*n.slideWidth*-1,n.slideCount%n.options.slidesToScroll*i*-1))):t+n.options.slidesToShow>n.slideCount&&(n.slideOffset=(t+n.options.slidesToShow-n.slideCount)*n.slideWidth,r=(t+n.options.slidesToShow-n.slideCount)*i),n.slideCount<=n.options.slidesToShow&&(r=n.slideOffset=0),!0===n.options.centerMode&&n.slideCount<=n.options.slidesToShow?n.slideOffset=n.slideWidth*Math.floor(n.options.slidesToShow)/2-n.slideWidth*n.slideCount/2:!0===n.options.centerMode&&!0===n.options.infinite?n.slideOffset+=n.slideWidth*Math.floor(n.options.slidesToShow/2)-n.slideWidth:!0===n.options.centerMode&&(n.slideOffset=0,n.slideOffset+=n.slideWidth*Math.floor(n.options.slidesToShow/2)),e=!1===n.options.vertical?t*n.slideWidth*-1+n.slideOffset:t*i*-1+r,!0===n.options.variableWidth&&(o=n.slideCount<=n.options.slidesToShow||!1===n.options.infinite?n.$slideTrack.children(".slick-slide").eq(t):n.$slideTrack.children(".slick-slide").eq(t+n.options.slidesToShow),e=!0===n.options.rtl?o[0]?-1*(n.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,!0===n.options.centerMode&&(o=n.slideCount<=n.options.slidesToShow||!1===n.options.infinite?n.$slideTrack.children(".slick-slide").eq(t):n.$slideTrack.children(".slick-slide").eq(t+n.options.slidesToShow+1),e=!0===n.options.rtl?o[0]?-1*(n.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,e+=(n.$list.width()-o.outerWidth())/2)),e},r.prototype.getOption=r.prototype.slickGetOption=function(t){return this.options[t]},r.prototype.getNavigableIndexes=function(){for(var t=this,e=0,i=0,o=[],s=!1===t.options.infinite?t.slideCount:(e=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,2*t.slideCount);e<s;)o.push(e),e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var i,o=this,s=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0;return!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(t,e){if(e.offsetLeft-s+c(e).outerWidth()/2>-1*o.swipeLeft)return i=e,!1}),Math.abs(c(i).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},r.prototype.init=function(t){var e=this;c(e.$slider).hasClass("slick-initialized")||(c(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),t&&e.$slider.trigger("init",[e]),!0===e.options.accessibility&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},r.prototype.initADA=function(){var o=this,i=Math.ceil(o.slideCount/o.options.slidesToShow),s=o.getNavigableIndexes().filter(function(t){return 0<=t&&t<o.slideCount});o.$slides.add(o.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==o.$dots&&(o.$slides.not(o.$slideTrack.find(".slick-cloned")).each(function(t){var e,i=s.indexOf(t);c(this).attr({role:"tabpanel",id:"slick-slide"+o.instanceUid+t,tabindex:-1}),-1!==i&&(e="slick-slide-control"+o.instanceUid+i,c("#"+e).length&&c(this).attr({"aria-describedby":e}))}),o.$dots.attr("role","tablist").find("li").each(function(t){var e=s[t];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+o.instanceUid+t,"aria-controls":"slick-slide"+o.instanceUid+e,"aria-label":t+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(o.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var t=o.currentSlide,e=t+o.options.slidesToShow;t<e;t++)o.options.focusOnChange?o.$slides.eq(t).attr({tabindex:"0"}):o.$slides.eq(t).removeAttr("tabindex");o.activateADA()},r.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},r.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(c("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&c("li",t.$dots).on("mouseenter.slick",c.proxy(t.interrupt,t,!0)).on("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",c.proxy(t.interrupt,t,!1)))},r.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),c(document).on(t.visibilityChange,c.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),c(window).on("orientationchange.slick.slick-"+t.instanceUid,c.proxy(t.orientationChange,t)),c(window).on("resize.slick.slick-"+t.instanceUid,c.proxy(t.resize,t)),c("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),c(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),c(t.setPosition)},r.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},r.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){var t,e,i,n=this;function o(t){c("img[data-lazy]",t).each(function(){var t=c(this),e=c(this).attr("data-lazy"),i=c(this).attr("data-srcset"),o=c(this).attr("data-sizes")||n.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){t.animate({opacity:0},100,function(){i&&(t.attr("srcset",i),o&&t.attr("sizes",o)),t.attr("src",e).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),n.$slider.trigger("lazyLoaded",[n,t,e])})},s.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),n.$slider.trigger("lazyLoadError",[n,t,e])},s.src=e})}if(!0===n.options.centerMode?i=!0===n.options.infinite?(e=n.currentSlide+(n.options.slidesToShow/2+1))+n.options.slidesToShow+2:(e=Math.max(0,n.currentSlide-(n.options.slidesToShow/2+1)),n.options.slidesToShow/2+1+2+n.currentSlide):(e=n.options.infinite?n.options.slidesToShow+n.currentSlide:n.currentSlide,i=Math.ceil(e+n.options.slidesToShow),!0===n.options.fade&&(0<e&&e--,i<=n.slideCount&&i++)),t=n.$slider.find(".slick-slide").slice(e,i),"anticipated"===n.options.lazyLoad)for(var s=e-1,r=i,a=n.$slider.find(".slick-slide"),l=0;l<n.options.slidesToScroll;l++)s<0&&(s=n.slideCount-1),t=(t=t.add(a.eq(s))).add(a.eq(r)),s--,r++;o(t),n.slideCount<=n.options.slidesToShow?o(n.$slider.find(".slick-slide")):n.currentSlide>=n.slideCount-n.options.slidesToShow?o(n.$slider.find(".slick-cloned").slice(0,n.options.slidesToShow)):0===n.currentSlide&&o(n.$slider.find(".slick-cloned").slice(-1*n.options.slidesToShow))},r.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},r.prototype.postSlide=function(t){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,t]),e.animating=!1,e.slideCount>e.options.slidesToShow&&e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),!0===e.options.accessibility&&(e.initADA(),e.options.focusOnChange&&c(e.$slides.get(e.currentSlide)).attr("tabindex",0).focus()))},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(t){t.preventDefault()},r.prototype.progressiveLazyLoad=function(t){t=t||1;var e,i,o,s,n,r=this,a=c("img[data-lazy]",r.$slider);a.length?(e=a.first(),i=e.attr("data-lazy"),o=e.attr("data-srcset"),s=e.attr("data-sizes")||r.$slider.attr("data-sizes"),(n=document.createElement("img")).onload=function(){o&&(e.attr("srcset",o),s&&e.attr("sizes",s)),e.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===r.options.adaptiveHeight&&r.setPosition(),r.$slider.trigger("lazyLoaded",[r,e,i]),r.progressiveLazyLoad()},n.onerror=function(){t<3?setTimeout(function(){r.progressiveLazyLoad(t+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,i]),r.progressiveLazyLoad())},n.src=i):r.$slider.trigger("allImagesLoaded",[r])},r.prototype.refresh=function(t){var e,i=this,o=i.slideCount-i.options.slidesToShow;!i.options.infinite&&i.currentSlide>o&&(i.currentSlide=o),i.slideCount<=i.options.slidesToShow&&(i.currentSlide=0),e=i.currentSlide,i.destroy(!0),c.extend(i,i.initials,{currentSlide:e}),i.init(),t||i.changeSlide({data:{message:"index",index:e}},!1)},r.prototype.registerBreakpoints=function(){var t,e,i,o=this,s=o.options.responsive||null;if("array"===c.type(s)&&s.length){for(t in o.respondTo=o.options.respondTo||"window",s)if(i=o.breakpoints.length-1,s.hasOwnProperty(t)){for(e=s[t].breakpoint;0<=i;)o.breakpoints[i]&&o.breakpoints[i]===e&&o.breakpoints.splice(i,1),i--;o.breakpoints.push(e),o.breakpointSettings[e]=s[t].settings}o.breakpoints.sort(function(t,e){return o.options.mobileFirst?t-e:e-t})}},r.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},r.prototype.resize=function(){var t=this;c(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=c(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(t,e,i){var o=this;if(t="boolean"==typeof t?!0===(e=t)?0:o.slideCount-1:!0===e?--t:t,o.slideCount<1||t<0||t>o.slideCount-1)return!1;o.unload(),!0===i?o.$slideTrack.children().remove():o.$slideTrack.children(this.options.slide).eq(t).remove(),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slidesCache=o.$slides,o.reinit()},r.prototype.setCSS=function(t){var e,i,o=this,s={};!0===o.options.rtl&&(t=-t),e="left"==o.positionProp?Math.ceil(t)+"px":"0px",i="top"==o.positionProp?Math.ceil(t)+"px":"0px",s[o.positionProp]=t,!1===o.transformsEnabled||(!(s={})===o.cssTransitions?s[o.animType]="translate("+e+", "+i+")":s[o.animType]="translate3d("+e+", "+i+", 0px)"),o.$slideTrack.css(s)},r.prototype.setDimensions=function(){var t=this;!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},r.prototype.setFade=function(){var i,o=this;o.$slides.each(function(t,e){i=o.slideWidth*t*-1,!0===o.options.rtl?c(e).css({position:"relative",right:i,top:0,zIndex:o.options.zIndex-2,opacity:0}):c(e).css({position:"relative",left:i,top:0,zIndex:o.options.zIndex-2,opacity:0})}),o.$slides.eq(o.currentSlide).css({zIndex:o.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var t,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(t=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.css("height",t))},r.prototype.setOption=r.prototype.slickSetOption=function(){var t,e,i,o,s,n=this,r=!1;if("object"===c.type(arguments[0])?(i=arguments[0],r=arguments[1],s="multiple"):"string"===c.type(arguments[0])&&(o=arguments[1],r=arguments[2],"responsive"===(i=arguments[0])&&"array"===c.type(arguments[1])?s="responsive":void 0!==arguments[1]&&(s="single")),"single"===s)n.options[i]=o;else if("multiple"===s)c.each(i,function(t,e){n.options[t]=e});else if("responsive"===s)for(e in o)if("array"!==c.type(n.options.responsive))n.options.responsive=[o[e]];else{for(t=n.options.responsive.length-1;0<=t;)n.options.responsive[t].breakpoint===o[e].breakpoint&&n.options.responsive.splice(t,1),t--;n.options.responsive.push(o[e])}r&&(n.unload(),n.reinit())},r.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},r.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},r.prototype.setSlideClasses=function(t){var e,i,o,s,n=this,r=n.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true");n.$slides.eq(t).addClass("slick-current"),!0===n.options.centerMode?(o=n.options.slidesToShow%2==0?1:0,s=Math.floor(n.options.slidesToShow/2),!0===n.options.infinite&&(s<=t&&t<=n.slideCount-1-s?n.$slides.slice(t-s+o,t+s+1).addClass("slick-active").attr("aria-hidden","false"):(e=n.options.slidesToShow+t,r.slice(e-s+1+o,e+s+2).addClass("slick-active").attr("aria-hidden","false")),0===t?r.eq(r.length-1-n.options.slidesToShow).addClass("slick-center"):t===n.slideCount-1&&r.eq(n.options.slidesToShow).addClass("slick-center")),n.$slides.eq(t).addClass("slick-center")):0<=t&&t<=n.slideCount-n.options.slidesToShow?n.$slides.slice(t,t+n.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):r.length<=n.options.slidesToShow?r.addClass("slick-active").attr("aria-hidden","false"):(i=n.slideCount%n.options.slidesToShow,e=!0===n.options.infinite?n.options.slidesToShow+t:t,n.options.slidesToShow==n.options.slidesToScroll&&n.slideCount-t<n.options.slidesToShow?r.slice(e-(n.options.slidesToShow-i),e+i).addClass("slick-active").attr("aria-hidden","false"):r.slice(e,e+n.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false")),"ondemand"!==n.options.lazyLoad&&"anticipated"!==n.options.lazyLoad||n.lazyLoad()},r.prototype.setupInfinite=function(){var t,e,i,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(e=null,o.slideCount>o.options.slidesToShow)){for(i=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-i;--t)e=t-1,c(o.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<i+o.slideCount;t+=1)e=t,c(o.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},r.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},r.prototype.selectHandler=function(t){var e=c(t.target).is(".slick-slide")?c(t.target):c(t.target).parents(".slick-slide"),i=(i=parseInt(e.attr("data-slick-index")))||0;this.slideCount<=this.options.slidesToShow?this.slideHandler(i,!1,!0):this.slideHandler(i)},r.prototype.slideHandler=function(t,e,i){var o,s,n,r,a,l,c=this;if(e=e||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===t))if(!1===e&&c.asNavFor(t),o=t,a=c.getLeft(o),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(t<0||t>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(o=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(o)}):c.postSlide(o));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(t<0||t>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(o=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(o)}):c.postSlide(o));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),s=o<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+o:o>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:o-c.slideCount:o,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,s]),n=c.currentSlide,c.currentSlide=s,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(n),c.fadeSlide(s,function(){c.postSlide(s)})):c.postSlide(s),void c.animateHeight();!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,function(){c.postSlide(s)}):c.postSlide(s)}},r.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var t=this,e=t.touchObject.startX-t.touchObject.curX,i=t.touchObject.startY-t.touchObject.curY,o=Math.atan2(i,e),s=Math.round(180*o/Math.PI);return s<0&&(s=360-Math.abs(s)),s<=45&&0<=s||s<=360&&315<=s?!1===t.options.rtl?"left":"right":135<=s&&s<=225?!1===t.options.rtl?"right":"left":!0===t.options.verticalSwiping?35<=s&&s<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(t){var e,i,o=this;if(o.dragging=!1,o.swiping=!1,o.scrolling)return o.scrolling=!1;if(o.interrupted=!1,o.shouldClick=!(10<o.touchObject.swipeLength),void 0===o.touchObject.curX)return!1;if(!0===o.touchObject.edgeHit&&o.$slider.trigger("edge",[o,o.swipeDirection()]),o.touchObject.swipeLength>=o.touchObject.minSwipe){switch(i=o.swipeDirection()){case"left":case"down":e=o.options.swipeToSlide?o.checkNavigable(o.currentSlide+o.getSlideCount()):o.currentSlide+o.getSlideCount(),o.currentDirection=0;break;case"right":case"up":e=o.options.swipeToSlide?o.checkNavigable(o.currentSlide-o.getSlideCount()):o.currentSlide-o.getSlideCount(),o.currentDirection=1}"vertical"!=i&&(o.slideHandler(e),o.touchObject={},o.$slider.trigger("swipe",[o,i]))}else o.touchObject.startX!==o.touchObject.curX&&(o.slideHandler(o.currentSlide),o.touchObject={})},r.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},r.prototype.swipeMove=function(t){var e,i,o,s,n,r=this,a=void 0!==t.originalEvent?t.originalEvent.touches:null;return!(!r.dragging||r.scrolling||a&&1!==a.length)&&(e=r.getLeft(r.currentSlide),r.touchObject.curX=void 0!==a?a[0].pageX:t.clientX,r.touchObject.curY=void 0!==a?a[0].pageY:t.clientY,r.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(r.touchObject.curX-r.touchObject.startX,2))),n=Math.round(Math.sqrt(Math.pow(r.touchObject.curY-r.touchObject.startY,2))),!r.options.verticalSwiping&&!r.swiping&&4<n?!(r.scrolling=!0):(!0===r.options.verticalSwiping&&(r.touchObject.swipeLength=n),i=r.swipeDirection(),void 0!==t.originalEvent&&4<r.touchObject.swipeLength&&(r.swiping=!0,t.preventDefault()),s=(!1===r.options.rtl?1:-1)*(r.touchObject.curX>r.touchObject.startX?1:-1),!0===r.options.verticalSwiping&&(s=r.touchObject.curY>r.touchObject.startY?1:-1),o=r.touchObject.swipeLength,(r.touchObject.edgeHit=!1)===r.options.infinite&&(0===r.currentSlide&&"right"===i||r.currentSlide>=r.getDotCount()&&"left"===i)&&(o=r.touchObject.swipeLength*r.options.edgeFriction,r.touchObject.edgeHit=!0),!1===r.options.vertical?r.swipeLeft=e+o*s:r.swipeLeft=e+o*(r.$list.height()/r.listWidth)*s,!0===r.options.verticalSwiping&&(r.swipeLeft=e+o*s),!0!==r.options.fade&&!1!==r.options.touchMove&&(!0===r.animating?(r.swipeLeft=null,!1):void r.setCSS(r.swipeLeft))))},r.prototype.swipeStart=function(t){var e,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return!(i.touchObject={});void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==e?e.pageX:t.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==e?e.pageY:t.clientY,i.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},r.prototype.unload=function(){var t=this;c(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},r.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2);!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode||t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode)&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){for(var t,e=this,i=arguments[0],o=Array.prototype.slice.call(arguments,1),s=e.length,n=0;n<s;n++)if("object"==typeof i||void 0===i?e[n].slick=new r(e[n],i):t=e[n].slick[i].apply(e[n].slick,o),void 0!==t)return t;return e}}),function(e){"undefined"!=typeof jQuery&&jQuery||"function"!=typeof define||!define.amd?"undefined"!=typeof jQuery&&jQuery||"object"!=typeof exports?e(jQuery,document,window,navigator):e(require("jquery"),document,window,navigator):define(["jquery"],function(t){return e(t,document,window,navigator)})}(function(l,c,d,t,p){"use strict";var e,i,o=0,s=(i=/msie\s\d+/i,0<(e=t.userAgent).search(i)&&i.exec(e).toString().split(" ")[1]<9&&(l("html").addClass("lt-ie9"),!0));function n(t,e,i){this.VERSION="2.3.1",this.input=t,this.plugin_count=i,this.current_plugin=0,this.calc_count=0,this.update_tm=0,this.old_from=0,this.old_to=0,this.old_min_interval=null,this.raf_id=null,this.dragging=!1,this.force_redraw=!1,this.no_diapason=!1,this.has_tab_index=!0,this.is_key=!1,this.is_update=!1,this.is_start=!0,this.is_finish=!1,this.is_active=!1,this.is_resize=!1,this.is_click=!1,e=e||{},this.$cache={win:l(d),body:l(c.body),input:l(t),cont:null,rs:null,min:null,max:null,from:null,to:null,single:null,bar:null,line:null,s_single:null,s_from:null,s_to:null,shad_single:null,shad_from:null,shad_to:null,edge:null,grid:null,grid_labels:[]},this.coords={x_gap:0,x_pointer:0,w_rs:0,w_rs_old:0,w_handle:0,p_gap:0,p_gap_left:0,p_gap_right:0,p_step:0,p_pointer:0,p_handle:0,p_single_fake:0,p_single_real:0,p_from_fake:0,p_from_real:0,p_to_fake:0,p_to_real:0,p_bar_x:0,p_bar_w:0,grid_gap:0,big_num:0,big:[],big_w:[],big_p:[],big_x:[]},this.labels={w_min:0,w_max:0,w_from:0,w_to:0,w_single:0,p_min:0,p_max:0,p_from_fake:0,p_from_left:0,p_to_fake:0,p_to_left:0,p_single_fake:0,p_single_left:0};var o,s,n=this.$cache.input,r=n.prop("value"),a={skin:"flat",type:"single",min:10,max:100,from:null,to:null,step:1,min_interval:0,max_interval:0,drag_interval:!1,values:[],p_values:[],from_fixed:!1,from_min:null,from_max:null,from_shadow:!1,to_fixed:!1,to_min:null,to_max:null,to_shadow:!1,prettify_enabled:!0,prettify_separator:" ",prettify:null,force_edges:!1,keyboard:!0,grid:!1,grid_margin:!0,grid_num:4,grid_snap:!1,hide_min_max:!1,hide_from_to:!1,prefix:"",postfix:"",max_postfix:"",decorate_both:!0,values_separator:" â ",input_values_separator:";",disable:!1,block:!1,extra_classes:"",scope:null,onStart:null,onChange:null,onFinish:null,onUpdate:null};for(s in"INPUT"!==n[0].nodeName&&console&&console.warn&&console.warn("Base element should be <input>!",n[0]),(o={skin:n.data("skin"),type:n.data("type"),min:n.data("min"),max:n.data("max"),from:n.data("from"),to:n.data("to"),step:n.data("step"),min_interval:n.data("minInterval"),max_interval:n.data("maxInterval"),drag_interval:n.data("dragInterval"),values:n.data("values"),from_fixed:n.data("fromFixed"),from_min:n.data("fromMin"),from_max:n.data("fromMax"),from_shadow:n.data("fromShadow"),to_fixed:n.data("toFixed"),to_min:n.data("toMin"),to_max:n.data("toMax"),to_shadow:n.data("toShadow"),prettify_enabled:n.data("prettifyEnabled"),prettify_separator:n.data("prettifySeparator"),force_edges:n.data("forceEdges"),keyboard:n.data("keyboard"),grid:n.data("grid"),grid_margin:n.data("gridMargin"),grid_num:n.data("gridNum"),grid_snap:n.data("gridSnap"),hide_min_max:n.data("hideMinMax"),hide_from_to:n.data("hideFromTo"),prefix:n.data("prefix"),postfix:n.data("postfix"),max_postfix:n.data("maxPostfix"),decorate_both:n.data("decorateBoth"),values_separator:n.data("valuesSeparator"),input_values_separator:n.data("inputValuesSeparator"),disable:n.data("disable"),block:n.data("block"),extra_classes:n.data("extraClasses")}).values=o.values&&o.values.split(","),o)o.hasOwnProperty(s)&&(o[s]!==p&&""!==o[s]||delete o[s]);r!==p&&""!==r&&((r=r.split(o.input_values_separator||e.input_values_separator||";"))[0]&&r[0]==+r[0]&&(r[0]=+r[0]),r[1]&&r[1]==+r[1]&&(r[1]=+r[1]),e&&e.values&&e.values.length?(a.from=r[0]&&e.values.indexOf(r[0]),a.to=r[1]&&e.values.indexOf(r[1])):(a.from=r[0]&&+r[0],a.to=r[1]&&+r[1])),l.extend(a,e),l.extend(a,o),this.options=a,this.update_check={},this.validate(),this.result={input:this.$cache.input,slider:null,min:this.options.min,max:this.options.max,from:this.options.from,from_percent:0,from_value:null,to:this.options.to,to_percent:0,to_value:null},this.init()}Function.prototype.bind||(Function.prototype.bind=function(o){var s=this,n=[].slice;if("function"!=typeof s)throw new TypeError;var r=n.call(arguments,1),a=function(){if(this instanceof a){var t=function(){};t.prototype=s.prototype;var e=new t,i=s.apply(e,r.concat(n.call(arguments)));return Object(i)===i?i:e}return s.apply(o,r.concat(n.call(arguments)))};return a}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){var i;if(null==this)throw new TypeError('"this" is null or not defined');var o=Object(this),s=o.length>>>0;if(0==s)return-1;var n=+e||0;if(Math.abs(n)===1/0&&(n=0),s<=n)return-1;for(i=Math.max(0<=n?n:s-Math.abs(n),0);i<s;){if(i in o&&o[i]===t)return i;i++}return-1}),n.prototype={init:function(t){this.no_diapason=!1,this.coords.p_step=this.convertToPercent(this.options.step,!0),this.target="base",this.toggleInput(),this.append(),this.setMinMax(),t?(this.force_redraw=!0,this.calc(!0),this.callOnUpdate()):(this.force_redraw=!0,this.calc(!0),this.callOnStart()),this.updateScene()},append:function(){var t='<span class="irs irs--'+this.options.skin+" js-irs-"+this.plugin_count+" "+this.options.extra_classes+'"></span>';this.$cache.input.before(t),this.$cache.input.prop("readonly",!0),this.$cache.cont=this.$cache.input.prev(),this.result.slider=this.$cache.cont,this.$cache.cont.html('<span class="irs"><span class="irs-line" tabindex="0"></span><span class="irs-min">0</span><span class="irs-max">1</span><span class="irs-from">0</span><span class="irs-to">0</span><span class="irs-single">0</span></span><span class="irs-grid"></span>'),this.$cache.rs=this.$cache.cont.find(".irs"),this.$cache.min=this.$cache.cont.find(".irs-min"),this.$cache.max=this.$cache.cont.find(".irs-max"),this.$cache.from=this.$cache.cont.find(".irs-from"),this.$cache.to=this.$cache.cont.find(".irs-to"),this.$cache.single=this.$cache.cont.find(".irs-single"),this.$cache.line=this.$cache.cont.find(".irs-line"),this.$cache.grid=this.$cache.cont.find(".irs-grid"),"single"===this.options.type?(this.$cache.cont.append('<span class="irs-bar irs-bar--single"></span><span class="irs-shadow shadow-single"></span><span class="irs-handle single"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.edge=this.$cache.cont.find(".irs-bar-edge"),this.$cache.s_single=this.$cache.cont.find(".single"),this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.shad_single=this.$cache.cont.find(".shadow-single")):(this.$cache.cont.append('<span class="irs-bar"></span><span class="irs-shadow shadow-from"></span><span class="irs-shadow shadow-to"></span><span class="irs-handle from"><i></i><i></i><i></i></span><span class="irs-handle to"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.s_from=this.$cache.cont.find(".from"),this.$cache.s_to=this.$cache.cont.find(".to"),this.$cache.shad_from=this.$cache.cont.find(".shadow-from"),this.$cache.shad_to=this.$cache.cont.find(".shadow-to"),this.setTopHandler()),this.options.hide_from_to&&(this.$cache.from[0].style.display="none",this.$cache.to[0].style.display="none",this.$cache.single[0].style.display="none"),this.appendGrid(),this.options.disable?(this.appendDisableMask(),this.$cache.input[0].disabled=!0):(this.$cache.input[0].disabled=!1,this.removeDisableMask(),this.bindEvents()),this.options.disable||(this.options.block?this.appendDisableMask():this.removeDisableMask()),this.options.drag_interval&&(this.$cache.bar[0].style.cursor="ew-resize")},setTopHandler:function(){var t=this.options.min,e=this.options.max,i=this.options.from,o=this.options.to;t<i&&o===e?this.$cache.s_from.addClass("type_last"):o<e&&this.$cache.s_to.addClass("type_last")},changeLevel:function(t){switch(t){case"single":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_single_fake),this.$cache.s_single.addClass("state_hover");break;case"from":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.$cache.s_from.addClass("state_hover"),this.$cache.s_from.addClass("type_last"),this.$cache.s_to.removeClass("type_last");break;case"to":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_to_fake),this.$cache.s_to.addClass("state_hover"),this.$cache.s_to.addClass("type_last"),this.$cache.s_from.removeClass("type_last");break;case"both":this.coords.p_gap_left=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.coords.p_gap_right=this.toFixed(this.coords.p_to_fake-this.coords.p_pointer),this.$cache.s_to.removeClass("type_last"),this.$cache.s_from.removeClass("type_last")}},appendDisableMask:function(){this.$cache.cont.append('<span class="irs-disable-mask"></span>'),this.$cache.cont.addClass("irs-disabled")},removeDisableMask:function(){this.$cache.cont.remove(".irs-disable-mask"),this.$cache.cont.removeClass("irs-disabled")},remove:function(){this.$cache.cont.remove(),this.$cache.cont=null,this.$cache.line.off("keydown.irs_"+this.plugin_count),this.$cache.body.off("touchmove.irs_"+this.plugin_count),this.$cache.body.off("mousemove.irs_"+this.plugin_count),this.$cache.win.off("touchend.irs_"+this.plugin_count),this.$cache.win.off("mouseup.irs_"+this.plugin_count),s&&(this.$cache.body.off("mouseup.irs_"+this.plugin_count),this.$cache.body.off("mouseleave.irs_"+this.plugin_count)),this.$cache.grid_labels=[],this.coords.big=[],this.coords.big_w=[],this.coords.big_p=[],this.coords.big_x=[],cancelAnimationFrame(this.raf_id)},bindEvents:function(){this.no_diapason||(this.$cache.body.on("touchmove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.body.on("mousemove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.win.on("touchend.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.win.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.line.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("focus.irs_"+this.plugin_count,this.pointerFocus.bind(this)),this.options.drag_interval&&"double"===this.options.type?(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"both")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"both"))):(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),"single"===this.options.type?(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.shad_single.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.edge.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_single.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))):(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),this.options.keyboard&&this.$cache.line.on("keydown.irs_"+this.plugin_count,this.key.bind(this,"keyboard")),s&&(this.$cache.body.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.body.on("mouseleave.irs_"+this.plugin_count,this.pointerUp.bind(this))))},pointerFocus:function(t){var e,i;this.target||(e=(i="single"===this.options.type?this.$cache.single:this.$cache.from).offset().left,e+=i.width()/2-1,this.pointerClick("single",{preventDefault:function(){},pageX:e}))},pointerMove:function(t){var e;this.dragging&&(e=t.pageX||t.originalEvent.touches&&t.originalEvent.touches[0].pageX,this.coords.x_pointer=e-this.coords.x_gap,this.calc())},pointerUp:function(t){this.current_plugin===this.plugin_count&&this.is_active&&(this.is_active=!1,this.$cache.cont.find(".state_hover").removeClass("state_hover"),this.force_redraw=!0,s&&l("*").prop("unselectable",!1),this.updateScene(),this.restoreOriginalMinInterval(),(l.contains(this.$cache.cont[0],t.target)||this.dragging)&&this.callOnFinish(),this.dragging=!1)},pointerDown:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&("both"===t&&this.setTempMinInterval(),t=t||this.target||"from",this.current_plugin=this.plugin_count,this.target=t,this.is_active=!0,this.dragging=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=i-this.coords.x_gap,this.calcPointerPercent(),this.changeLevel(t),s&&l("*").prop("unselectable",!0),this.$cache.line.trigger("focus"),this.updateScene())},pointerClick:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&(this.current_plugin=this.plugin_count,this.target=t,this.is_click=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=+(i-this.coords.x_gap).toFixed(),this.force_redraw=!0,this.calc(),this.$cache.line.trigger("focus"))},key:function(t,e){if(!(this.current_plugin!==this.plugin_count||e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)){switch(e.which){case 83:case 65:case 40:case 37:e.preventDefault(),this.moveByKey(!1);break;case 87:case 68:case 38:case 39:e.preventDefault(),this.moveByKey(!0)}return!0}},moveByKey:function(t){var e=this.coords.p_pointer,i=(this.options.max-this.options.min)/100,i=this.options.step/i;t?e+=i:e-=i,this.coords.x_pointer=this.toFixed(this.coords.w_rs/100*e),this.is_key=!0,this.calc()},setMinMax:function(){if(this.options){if(this.options.hide_min_max)return this.$cache.min[0].style.display="none",void(this.$cache.max[0].style.display="none");var t,e;this.options.values.length?(this.$cache.min.html(this.decorate(this.options.p_values[this.options.min])),this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]))):(t=this._prettify(this.options.min),e=this._prettify(this.options.max),this.result.min_pretty=t,this.result.max_pretty=e,this.$cache.min.html(this.decorate(t,this.options.min)),this.$cache.max.html(this.decorate(e,this.options.max))),this.labels.w_min=this.$cache.min.outerWidth(!1),this.labels.w_max=this.$cache.max.outerWidth(!1)}},setTempMinInterval:function(){var t=this.result.to-this.result.from;null===this.old_min_interval&&(this.old_min_interval=this.options.min_interval),this.options.min_interval=t},restoreOriginalMinInterval:function(){null!==this.old_min_interval&&(this.options.min_interval=this.old_min_interval,this.old_min_interval=null)},calc:function(t){if(this.options&&(this.calc_count++,10!==this.calc_count&&!t||(this.calc_count=0,this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.calcHandlePercent()),this.coords.w_rs)){this.calcPointerPercent();var e=this.getHandleX();switch("both"===this.target&&(this.coords.p_gap=0,e=this.getHandleX()),"click"===this.target&&(this.coords.p_gap=this.coords.p_handle/2,e=this.getHandleX(),this.options.drag_interval?this.target="both_one":this.target=this.chooseHandle(e)),this.target){case"base":var i=(this.options.max-this.options.min)/100,o=(this.result.from-this.options.min)/i,s=(this.result.to-this.options.min)/i;this.coords.p_single_real=this.toFixed(o),this.coords.p_from_real=this.toFixed(o),this.coords.p_to_real=this.toFixed(s),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real),this.target=null;break;case"single":if(this.options.from_fixed)break;this.coords.p_single_real=this.convertToRealPercent(e),this.coords.p_single_real=this.calcWithStep(this.coords.p_single_real),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real);break;case"from":if(this.options.from_fixed)break;this.coords.p_from_real=this.convertToRealPercent(e),this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real>this.coords.p_to_real&&(this.coords.p_from_real=this.coords.p_to_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_real=this.checkMaxInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);break;case"to":if(this.options.to_fixed)break;this.coords.p_to_real=this.convertToRealPercent(e),this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real<this.coords.p_from_real&&(this.coords.p_to_real=this.coords.p_from_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_real=this.checkMaxInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both":if(this.options.from_fixed||this.options.to_fixed)break;e=this.toFixed(e+.001*this.coords.p_handle),this.coords.p_from_real=this.convertToRealPercent(e)-this.coords.p_gap_left,this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.convertToRealPercent(e)+this.coords.p_gap_right,this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both_one":if(this.options.from_fixed||this.options.to_fixed)break;var n=this.convertToRealPercent(e),r=this.result.from_percent,a=this.result.to_percent-r,l=a/2,c=n-l,d=n+l;c<0&&(d=(c=0)+a),100<d&&(c=(d=100)-a),this.coords.p_from_real=this.calcWithStep(c),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.calcWithStep(d),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real)}"single"===this.options.type?(this.coords.p_bar_x=this.coords.p_handle/2,this.coords.p_bar_w=this.coords.p_single_fake,this.result.from_percent=this.coords.p_single_real,this.result.from=this.convertToValue(this.coords.p_single_real),this.result.from_pretty=this._prettify(this.result.from),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from])):(this.coords.p_bar_x=this.toFixed(this.coords.p_from_fake+this.coords.p_handle/2),this.coords.p_bar_w=this.toFixed(this.coords.p_to_fake-this.coords.p_from_fake),this.result.from_percent=this.coords.p_from_real,this.result.from=this.convertToValue(this.coords.p_from_real),this.result.from_pretty=this._prettify(this.result.from),this.result.to_percent=this.coords.p_to_real,this.result.to=this.convertToValue(this.coords.p_to_real),this.result.to_pretty=this._prettify(this.result.to),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from],this.result.to_value=this.options.values[this.result.to])),this.calcMinMax(),this.calcLabels()}},calcPointerPercent:function(){this.coords.w_rs?(this.coords.x_pointer<0||isNaN(this.coords.x_pointer)?this.coords.x_pointer=0:this.coords.x_pointer>this.coords.w_rs&&(this.coords.x_pointer=this.coords.w_rs),this.coords.p_pointer=this.toFixed(this.coords.x_pointer/this.coords.w_rs*100)):this.coords.p_pointer=0},convertToRealPercent:function(t){return t/(100-this.coords.p_handle)*100},convertToFakePercent:function(t){return t/100*(100-this.coords.p_handle)},getHandleX:function(){var t=100-this.coords.p_handle,e=this.toFixed(this.coords.p_pointer-this.coords.p_gap);return e<0?e=0:t<e&&(e=t),e},calcHandlePercent:function(){"single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100)},chooseHandle:function(t){return"single"===this.options.type?"single":this.coords.p_from_real+(this.coords.p_to_real-this.coords.p_from_real)/2<=t?this.options.to_fixed?"from":"to":this.options.from_fixed?"to":"from"},calcMinMax:function(){this.coords.w_rs&&(this.labels.p_min=this.labels.w_min/this.coords.w_rs*100,this.labels.p_max=this.labels.w_max/this.coords.w_rs*100)},calcLabels:function(){this.coords.w_rs&&!this.options.hide_from_to&&("single"===this.options.type?(this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=this.coords.p_single_fake+this.coords.p_handle/2-this.labels.p_single_fake/2):(this.labels.w_from=this.$cache.from.outerWidth(!1),this.labels.p_from_fake=this.labels.w_from/this.coords.w_rs*100,this.labels.p_from_left=this.coords.p_from_fake+this.coords.p_handle/2-this.labels.p_from_fake/2,this.labels.p_from_left=this.toFixed(this.labels.p_from_left),this.labels.p_from_left=this.checkEdges(this.labels.p_from_left,this.labels.p_from_fake),this.labels.w_to=this.$cache.to.outerWidth(!1),this.labels.p_to_fake=this.labels.w_to/this.coords.w_rs*100,this.labels.p_to_left=this.coords.p_to_fake+this.coords.p_handle/2-this.labels.p_to_fake/2,this.labels.p_to_left=this.toFixed(this.labels.p_to_left),this.labels.p_to_left=this.checkEdges(this.labels.p_to_left,this.labels.p_to_fake),this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=(this.labels.p_from_left+this.labels.p_to_left+this.labels.p_to_fake)/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.toFixed(this.labels.p_single_left)),this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake))},updateScene:function(){this.raf_id&&(cancelAnimationFrame(this.raf_id),this.raf_id=null),clearTimeout(this.update_tm),this.update_tm=null,this.options&&(this.drawHandles(),this.is_active?this.raf_id=requestAnimationFrame(this.updateScene.bind(this)):this.update_tm=setTimeout(this.updateScene.bind(this),300))},drawHandles:function(){this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&(this.coords.w_rs!==this.coords.w_rs_old&&(this.target="base",this.is_resize=!0),this.coords.w_rs===this.coords.w_rs_old&&!this.force_redraw||(this.setMinMax(),this.calc(!0),this.drawLabels(),this.options.grid&&(this.calcGridMargin(),this.calcGridLabels()),this.force_redraw=!0,this.coords.w_rs_old=this.coords.w_rs,this.drawShadow()),this.coords.w_rs&&(this.dragging||this.force_redraw||this.is_key)&&((this.old_from!==this.result.from||this.old_to!==this.result.to||this.force_redraw||this.is_key)&&(this.drawLabels(),this.$cache.bar[0].style.left=this.coords.p_bar_x+"%",this.$cache.bar[0].style.width=this.coords.p_bar_w+"%","single"===this.options.type?(this.$cache.bar[0].style.left=0,this.$cache.bar[0].style.width=this.coords.p_bar_w+this.coords.p_bar_x+"%",this.$cache.s_single[0].style.left=this.coords.p_single_fake+"%"):(this.$cache.s_from[0].style.left=this.coords.p_from_fake+"%",this.$cache.s_to[0].style.left=this.coords.p_to_fake+"%",this.old_from===this.result.from&&!this.force_redraw||(this.$cache.from[0].style.left=this.labels.p_from_left+"%"),this.old_to===this.result.to&&!this.force_redraw||(this.$cache.to[0].style.left=this.labels.p_to_left+"%")),this.$cache.single[0].style.left=this.labels.p_single_left+"%",this.writeToInput(),this.old_from===this.result.from&&this.old_to===this.result.to||this.is_start||(this.$cache.input.trigger("change"),this.$cache.input.trigger("input")),this.old_from=this.result.from,this.old_to=this.result.to,this.is_resize||this.is_update||this.is_start||this.is_finish||this.callOnChange(),(this.is_key||this.is_click)&&(this.is_key=!1,this.is_click=!1,this.callOnFinish()),this.is_update=!1,this.is_resize=!1,this.is_finish=!1),this.is_start=!1,this.is_key=!1,this.is_click=!1,this.force_redraw=!1))},drawLabels:function(){var t,e,i,o,s,n,r,a,l,c,d;this.options&&(n=this.options.values.length,r=this.options.p_values,this.options.hide_from_to||("single"===this.options.type?(t=n?this.decorate(r[this.result.from]):(o=this._prettify(this.result.from),this.decorate(o,this.result.from)),this.$cache.single.html(t),this.calcLabels(),this.labels.p_single_left<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",this.labels.p_single_left+this.labels.p_single_fake>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible"):(i=n?(this.options.decorate_both?(t=this.decorate(r[this.result.from]),t+=this.options.values_separator,t+=this.decorate(r[this.result.to])):t=this.decorate(r[this.result.from]+this.options.values_separator+r[this.result.to]),e=this.decorate(r[this.result.from]),this.decorate(r[this.result.to])):(o=this._prettify(this.result.from),s=this._prettify(this.result.to),this.options.decorate_both?(t=this.decorate(o,this.result.from),t+=this.options.values_separator,t+=this.decorate(s,this.result.to)):t=this.decorate(o+this.options.values_separator+s,this.result.to),e=this.decorate(o,this.result.from),this.decorate(s,this.result.to)),this.$cache.single.html(t),this.$cache.from.html(e),this.$cache.to.html(i),this.calcLabels(),a=Math.min(this.labels.p_single_left,this.labels.p_from_left),l=this.labels.p_single_left+this.labels.p_single_fake,c=this.labels.p_to_left+this.labels.p_to_fake,d=Math.max(l,c),this.labels.p_from_left+this.labels.p_from_fake>=this.labels.p_to_left?(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",d=this.result.from===this.result.to?("from"===this.target?this.$cache.from[0].style.visibility="visible":"to"===this.target?this.$cache.to[0].style.visibility="visible":this.target||(this.$cache.from[0].style.visibility="visible"),this.$cache.single[0].style.visibility="hidden",c):(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",Math.max(l,c))):(this.$cache.from[0].style.visibility="visible",this.$cache.to[0].style.visibility="visible",this.$cache.single[0].style.visibility="hidden"),a<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",d>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible")))},drawShadow:function(){var t,e,i,o,s=this.options,n=this.$cache,r="number"==typeof s.from_min&&!isNaN(s.from_min),a="number"==typeof s.from_max&&!isNaN(s.from_max),l="number"==typeof s.to_min&&!isNaN(s.to_min),c="number"==typeof s.to_max&&!isNaN(s.to_max);"single"===s.type?s.from_shadow&&(r||a)?(t=this.convertToPercent(r?s.from_min:s.min),e=this.convertToPercent(a?s.from_max:s.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,n.shad_single[0].style.display="block",n.shad_single[0].style.left=t+"%",n.shad_single[0].style.width=e+"%"):n.shad_single[0].style.display="none":(s.from_shadow&&(r||a)?(t=this.convertToPercent(r?s.from_min:s.min),e=this.convertToPercent(a?s.from_max:s.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,n.shad_from[0].style.display="block",n.shad_from[0].style.left=t+"%",n.shad_from[0].style.width=e+"%"):n.shad_from[0].style.display="none",s.to_shadow&&(l||c)?(i=this.convertToPercent(l?s.to_min:s.min),o=this.convertToPercent(c?s.to_max:s.max)-i,i=this.toFixed(i-this.coords.p_handle/100*i),o=this.toFixed(o-this.coords.p_handle/100*o),i+=this.coords.p_handle/2,n.shad_to[0].style.display="block",n.shad_to[0].style.left=i+"%",n.shad_to[0].style.width=o+"%"):n.shad_to[0].style.display="none")},writeToInput:function(){"single"===this.options.type?(this.options.values.length?this.$cache.input.prop("value",this.result.from_value):this.$cache.input.prop("value",this.result.from),this.$cache.input.data("from",this.result.from)):(this.options.values.length?this.$cache.input.prop("value",this.result.from_value+this.options.input_values_separator+this.result.to_value):this.$cache.input.prop("value",this.result.from+this.options.input_values_separator+this.result.to),this.$cache.input.data("from",this.result.from),this.$cache.input.data("to",this.result.to))},callOnStart:function(){this.writeToInput(),this.options.onStart&&"function"==typeof this.options.onStart&&(this.options.scope?this.options.onStart.call(this.options.scope,this.result):this.options.onStart(this.result))},callOnChange:function(){this.writeToInput(),this.options.onChange&&"function"==typeof this.options.onChange&&(this.options.scope?this.options.onChange.call(this.options.scope,this.result):this.options.onChange(this.result))},callOnFinish:function(){this.writeToInput(),this.options.onFinish&&"function"==typeof this.options.onFinish&&(this.options.scope?this.options.onFinish.call(this.options.scope,this.result):this.options.onFinish(this.result))},callOnUpdate:function(){this.writeToInput(),this.options.onUpdate&&"function"==typeof this.options.onUpdate&&(this.options.scope?this.options.onUpdate.call(this.options.scope,this.result):this.options.onUpdate(this.result))},toggleInput:function(){this.$cache.input.toggleClass("irs-hidden-input"),this.has_tab_index?this.$cache.input.prop("tabindex",-1):this.$cache.input.removeProp("tabindex"),this.has_tab_index=!this.has_tab_index},convertToPercent:function(t,e){var i,o=this.options.max-this.options.min,s=o/100;return o?(i=(e?t:t-this.options.min)/s,this.toFixed(i)):(this.no_diapason=!0,0)},convertToValue:function(t){var e,i,o=this.options.min,s=this.options.max,n=o.toString().split(".")[1],r=s.toString().split(".")[1],a=0,l=0;if(0===t)return this.options.min;if(100===t)return this.options.max;n&&(a=e=n.length),r&&(a=i=r.length),e&&i&&(a=i<=e?e:i),o<0&&(o=+(o+(l=Math.abs(o))).toFixed(a),s=+(s+l).toFixed(a));var c,d=(s-o)/100*t+o,p=this.options.step.toString().split(".")[1],d=p?+d.toFixed(p.length):(d/=this.options.step,+(d*=this.options.step).toFixed(0));return l&&(d-=l),(c=p?+d.toFixed(p.length):this.toFixed(d))<this.options.min?c=this.options.min:c>this.options.max&&(c=this.options.max),c},calcWithStep:function(t){var e=Math.round(t/this.coords.p_step)*this.coords.p_step;return 100<e&&(e=100),100===t&&(e=100),this.toFixed(e)},checkMinInterval:function(t,e,i){var o,s,n=this.options;return n.min_interval?(o=this.convertToValue(t),s=this.convertToValue(e),"from"===i?s-o<n.min_interval&&(o=s-n.min_interval):o-s<n.min_interval&&(o=s+n.min_interval),this.convertToPercent(o)):t},checkMaxInterval:function(t,e,i){var o,s,n=this.options;return n.max_interval?(o=this.convertToValue(t),s=this.convertToValue(e),"from"===i?s-o>n.max_interval&&(o=s-n.max_interval):o-s>n.max_interval&&(o=s+n.max_interval),this.convertToPercent(o)):t},checkDiapason:function(t,e,i){var o=this.convertToValue(t),s=this.options;return"number"!=typeof e&&(e=s.min),"number"!=typeof i&&(i=s.max),o<e&&(o=e),i<o&&(o=i),this.convertToPercent(o)},toFixed:function(t){return+t.toFixed(20)},_prettify:function(t){return this.options.prettify_enabled?this.options.prettify&&"function"==typeof this.options.prettify?this.options.prettify(t):this.prettify(t):t},prettify:function(t){return t.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1"+this.options.prettify_separator)},checkEdges:function(t,e){return this.options.force_edges&&(t<0?t=0:100-e<t&&(t=100-e)),this.toFixed(t)},validate:function(){var t,e,i=this.options,o=this.result,s=i.values,n=s.length;if("string"==typeof i.min&&(i.min=+i.min),"string"==typeof i.max&&(i.max=+i.max),"string"==typeof i.from&&(i.from=+i.from),"string"==typeof i.to&&(i.to=+i.to),"string"==typeof i.step&&(i.step=+i.step),"string"==typeof i.from_min&&(i.from_min=+i.from_min),"string"==typeof i.from_max&&(i.from_max=+i.from_max),"string"==typeof i.to_min&&(i.to_min=+i.to_min),"string"==typeof i.to_max&&(i.to_max=+i.to_max),"string"==typeof i.grid_num&&(i.grid_num=+i.grid_num),i.max<i.min&&(i.max=i.min),n)for(i.p_values=[],i.min=0,i.max=n-1,i.step=1,i.grid_num=i.max,i.grid_snap=!0,e=0;e<n;e++)t=+s[e],t=isNaN(t)?s[e]:(s[e]=t,this._prettify(t)),i.p_values.push(t);"number"==typeof i.from&&!isNaN(i.from)||(i.from=i.min),"number"==typeof i.to&&!isNaN(i.to)||(i.to=i.max),"single"===i.type?(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max)):(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max),i.to<i.min&&(i.to=i.min),i.to>i.max&&(i.to=i.max),this.update_check.from&&(this.update_check.from!==i.from&&i.from>i.to&&(i.from=i.to),this.update_check.to!==i.to&&i.to<i.from&&(i.to=i.from)),i.from>i.to&&(i.from=i.to),i.to<i.from&&(i.to=i.from)),("number"!=typeof i.step||isNaN(i.step)||!i.step||i.step<0)&&(i.step=1),"number"==typeof i.from_min&&i.from<i.from_min&&(i.from=i.from_min),"number"==typeof i.from_max&&i.from>i.from_max&&(i.from=i.from_max),"number"==typeof i.to_min&&i.to<i.to_min&&(i.to=i.to_min),"number"==typeof i.to_max&&i.from>i.to_max&&(i.to=i.to_max),o&&(o.min!==i.min&&(o.min=i.min),o.max!==i.max&&(o.max=i.max),(o.from<o.min||o.from>o.max)&&(o.from=i.from),(o.to<o.min||o.to>o.max)&&(o.to=i.to)),("number"!=typeof i.min_interval||isNaN(i.min_interval)||!i.min_interval||i.min_interval<0)&&(i.min_interval=0),("number"!=typeof i.max_interval||isNaN(i.max_interval)||!i.max_interval||i.max_interval<0)&&(i.max_interval=0),i.min_interval&&i.min_interval>i.max-i.min&&(i.min_interval=i.max-i.min),i.max_interval&&i.max_interval>i.max-i.min&&(i.max_interval=i.max-i.min)},decorate:function(t,e){var i="",o=this.options;return o.prefix&&(i+=o.prefix),i+=t,o.max_postfix&&(o.values.length&&t===o.p_values[o.max]||e===o.max)&&(i+=o.max_postfix,o.postfix&&(i+=" ")),o.postfix&&(i+=o.postfix),i},updateFrom:function(){this.result.from=this.options.from,this.result.from_percent=this.convertToPercent(this.result.from),this.result.from_pretty=this._prettify(this.result.from),this.options.values&&(this.result.from_value=this.options.values[this.result.from])},updateTo:function(){this.result.to=this.options.to,this.result.to_percent=this.convertToPercent(this.result.to),this.result.to_pretty=this._prettify(this.result.to),this.options.values&&(this.result.to_value=this.options.values[this.result.to])},updateResult:function(){this.result.min=this.options.min,this.result.max=this.options.max,this.updateFrom(),this.updateTo()},appendGrid:function(){if(this.options.grid){var t,e,i,o,s,n,r=this.options,a=r.max-r.min,l=r.grid_num,c=0,d=4,p="";for(this.calcGridMargin(),r.grid_snap&&(l=a/r.step),50<l&&(l=50),i=this.toFixed(100/l),4<l&&(d=3),7<l&&(d=2),14<l&&(d=1),28<l&&(d=0),t=0;t<l+1;t++){for(o=d,100<(c=this.toFixed(i*t))&&(c=100),s=((this.coords.big[t]=c)-i*(t-1))/(o+1),e=1;e<=o&&0!==c;e++)p+='<span class="irs-grid-pol small" style="left: '+this.toFixed(c-s*e)+'%"></span>';p+='<span class="irs-grid-pol" style="left: '+c+'%"></span>',n=this.convertToValue(c),p+='<span class="irs-grid-text js-grid-text-'+t+'" style="left: '+c+'%">'+(n=r.values.length?r.p_values[n]:this._prettify(n))+"</span>"}this.coords.big_num=Math.ceil(l+1),this.$cache.cont.addClass("irs-with-grid"),this.$cache.grid.html(p),this.cacheGridLabels()}},cacheGridLabels:function(){for(var t,e=this.coords.big_num,i=0;i<e;i++)t=this.$cache.grid.find(".js-grid-text-"+i),this.$cache.grid_labels.push(t);this.calcGridLabels()},calcGridLabels:function(){for(var t,e=[],i=[],o=this.coords.big_num,s=0;s<o;s++)this.coords.big_w[s]=this.$cache.grid_labels[s].outerWidth(!1),this.coords.big_p[s]=this.toFixed(this.coords.big_w[s]/this.coords.w_rs*100),this.coords.big_x[s]=this.toFixed(this.coords.big_p[s]/2),e[s]=this.toFixed(this.coords.big[s]-this.coords.big_x[s]),i[s]=this.toFixed(e[s]+this.coords.big_p[s]);for(this.options.force_edges&&(e[0]<-this.coords.grid_gap&&(e[0]=-this.coords.grid_gap,i[0]=this.toFixed(e[0]+this.coords.big_p[0]),this.coords.big_x[0]=this.coords.grid_gap),i[o-1]>100+this.coords.grid_gap&&(i[o-1]=100+this.coords.grid_gap,e[o-1]=this.toFixed(i[o-1]-this.coords.big_p[o-1]),this.coords.big_x[o-1]=this.toFixed(this.coords.big_p[o-1]-this.coords.grid_gap))),this.calcGridCollision(2,e,i),this.calcGridCollision(4,e,i),s=0;s<o;s++)t=this.$cache.grid_labels[s][0],this.coords.big_x[s]!==Number.POSITIVE_INFINITY&&(t.style.marginLeft=-this.coords.big_x[s]+"%")},calcGridCollision:function(t,e,i){for(var o,s,n=this.coords.big_num,r=0;r<n&&!(n<=(o=r+t/2));r+=t)s=this.$cache.grid_labels[o][0],i[r]<=e[o]?s.style.visibility="visible":s.style.visibility="hidden"},calcGridMargin:function(){this.options.grid_margin&&(this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&("single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100),this.coords.grid_gap=this.toFixed(this.coords.p_handle/2-.1),this.$cache.grid[0].style.width=this.toFixed(100-this.coords.p_handle)+"%",this.$cache.grid[0].style.left=this.coords.grid_gap+"%"))},update:function(t){this.input&&(this.is_update=!0,this.options.from=this.result.from,this.options.to=this.result.to,this.update_check.from=this.result.from,this.update_check.to=this.result.to,this.options=l.extend(this.options,t),this.validate(),this.updateResult(t),this.toggleInput(),this.remove(),this.init(!0))},reset:function(){this.input&&(this.updateResult(),this.update())},destroy:function(){this.input&&(this.toggleInput(),this.$cache.input.prop("readonly",!1),l.data(this.input,"ionRangeSlider",null),this.remove(),this.input=null,this.options=null)}},l.fn.ionRangeSlider=function(t){return this.each(function(){l.data(this,"ionRangeSlider")||l.data(this,"ionRangeSlider",new n(this,t,o++))})},function(){for(var n=0,t=["ms","moz","webkit","o"],e=0;e<t.length&&!d.requestAnimationFrame;++e)d.requestAnimationFrame=d[t[e]+"RequestAnimationFrame"],d.cancelAnimationFrame=d[t[e]+"CancelAnimationFrame"]||d[t[e]+"CancelRequestAnimationFrame"];d.requestAnimationFrame||(d.requestAnimationFrame=function(t,e){var i=(new Date).getTime(),o=Math.max(0,16-(i-n)),s=d.setTimeout(function(){t(i+o)},o);return n=i+o,s}),d.cancelAnimationFrame||(d.cancelAnimationFrame=function(t){clearTimeout(t)})}()}),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t($||require("jquery")):t(jQuery)}(function(O){"use strict";var s="styler",o={idSuffix:"-styler",filePlaceholder:"Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½",fileBrowse:"ÐÐ±Ð·Ð¾Ñ...",fileNumber:"ÐÑÐ±ÑÐ°Ð½Ð¾ ÑÐ°Ð¹Ð»Ð¾Ð²: %s",selectPlaceholder:"ÐÑÐ±ÐµÑÐ¸ÑÐµ...",selectSearch:!1,selectSearchLimit:10,selectSearchNotFound:"Ð¡Ð¾Ð²Ð¿Ð°Ð´ÐµÐ½Ð¸Ð¹ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾",selectSearchPlaceholder:"ÐÐ¾Ð¸ÑÐº...",selectVisibleOptions:0,selectSmartPositioning:!0,locale:"ru",locales:{en:{filePlaceholder:"No file selected",fileBrowse:"Browse...",fileNumber:"Selected files: %s",selectPlaceholder:"Select...",selectSearchNotFound:"No matches found",selectSearchPlaceholder:"Search..."}},onSelectOpened:function(){},onSelectClosed:function(){},onFormStyled:function(){}};function n(t,e){this.element=t,this.options=O.extend({},o,e);var i=this.options.locale;void 0!==this.options.locales[i]&&O.extend(this.options,this.options.locales[i]),this.init()}function M(t){var e,i,o;O(t.target).parents().hasClass("jq-selectbox")||"OPTION"==t.target.nodeName||O("div.jq-selectbox.opened").length&&(e=O("div.jq-selectbox.opened"),i=O("div.jq-selectbox__search input",e),o=O("div.jq-selectbox__dropdown",e),e.find("select").data("_"+s).options.onSelectClosed.call(e),i.length&&i.val("").keyup(),o.hide().find("li.sel").addClass("selected"),e.removeClass("focused opened dropup dropdown"))}n.prototype={init:function(){var t,e,i,o,s,q=O(this.element),N=this.options,P=!(!navigator.userAgent.match(/(iPad|iPhone|iPod)/i)||navigator.userAgent.match(/(Windows\sPhone)/i)),n=!(!navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/(Windows\sPhone)/i));function H(){void 0!==q.attr("id")&&""!==q.attr("id")&&(this.id=q.attr("id")+N.idSuffix),this.title=q.attr("title"),this.classes=q.attr("class"),this.data=q.data()}q.is(":checkbox")?((t=function(){var t=new H,e=O('<div class="jq-checkbox"><div class="jq-checkbox__div"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);q.after(e).prependTo(e),q.is(":checked")&&e.addClass("checked"),q.is(":disabled")&&e.addClass("disabled"),e.click(function(t){t.preventDefault(),q.triggerHandler("click"),e.is(".disabled")||(q.is(":checked")?(q.prop("checked",!1),e.removeClass("checked")):(q.prop("checked",!0),e.addClass("checked")),q.focus().change())}),q.closest("label").add('label[for="'+q.attr("id")+'"]').on("click.styler",function(t){O(t.target).is("a")||O(t.target).closest(e).length||(e.triggerHandler("click"),t.preventDefault())}),q.on("change.styler",function(){q.is(":checked")?e.addClass("checked"):e.removeClass("checked")}).on("keydown.styler",function(t){32==t.which&&e.click()}).on("focus.styler",function(){e.is(".disabled")||e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")})})(),q.on("refresh",function(){q.closest("label").add('label[for="'+q.attr("id")+'"]').off(".styler"),q.off(".styler").parent().before(q).remove(),t()})):q.is(":radio")?((e=function(){var t=new H,i=O('<div class="jq-radio"><div class="jq-radio__div"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);q.after(i).prependTo(i),q.is(":checked")&&i.addClass("checked"),q.is(":disabled")&&i.addClass("disabled"),O.fn.commonParents=function(){var t=this;return t.first().parents().filter(function(){return O(this).find(t).length===t.length})},O.fn.commonParent=function(){return O(this).commonParents().first()},i.click(function(t){var e;t.preventDefault(),q.triggerHandler("click"),i.is(".disabled")||((e=O('input[name="'+q.attr("name")+'"]')).commonParent().find(e).prop("checked",!1).parent().removeClass("checked"),q.prop("checked",!0).parent().addClass("checked"),q.focus().change())}),q.closest("label").add('label[for="'+q.attr("id")+'"]').on("click.styler",function(t){O(t.target).is("a")||O(t.target).closest(i).length||(i.triggerHandler("click"),t.preventDefault())}),q.on("change.styler",function(){q.parent().addClass("checked")}).on("focus.styler",function(){i.is(".disabled")||i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")})})(),q.on("refresh",function(){q.closest("label").add('label[for="'+q.attr("id")+'"]').off(".styler"),q.off(".styler").parent().before(q).remove(),e()})):q.is(":file")?((i=function(){var t=new H,o=q.data("placeholder");void 0===o&&(o=N.filePlaceholder);var e=q.data("browse");void 0!==e&&""!==e||(e=N.fileBrowse);var s=O('<div class="jq-file"><div class="jq-file__name">'+o+'</div><div class="jq-file__browse">'+e+"</div></div>").attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);q.after(s).appendTo(s),q.is(":disabled")&&s.addClass("disabled");var i=q.val(),n=O("div.jq-file__name",s);i&&n.text(i.replace(/.+[\\\/]/,"")),q.on("change.styler",function(){var t,e,i=q.val();q.is("[multiple]")&&(i="",0<(t=q[0].files.length)&&(void 0===(e=q.data("number"))&&(e=N.fileNumber),i=e=e.replace("%s",t))),n.text(i.replace(/.+[\\\/]/,"")),""===i?(n.text(o),s.removeClass("changed")):s.addClass("changed")}).on("focus.styler",function(){s.addClass("focused")}).on("blur.styler",function(){s.removeClass("focused")}).on("click.styler",function(){s.removeClass("focused")})})(),q.on("refresh",function(){q.off(".styler").parent().before(q).remove(),i()})):q.is('input[type="number"]')?((o=function(){var t=new H,e=O('<div class="jq-number"><div class="jq-number__spin minus"></div><div class="jq-number__spin plus"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);q.after(e).prependTo(e).wrap('<div class="jq-number__field"></div>'),q.is(":disabled")&&e.addClass("disabled");var n,r,a,i=null,o=null;void 0!==q.attr("min")&&(n=q.attr("min")),void 0!==q.attr("max")&&(r=q.attr("max")),a=void 0!==q.attr("step")&&O.isNumeric(q.attr("step"))?Number(q.attr("step")):Number(1);function s(t){var e,i=q.val();O.isNumeric(i)||(i=0,q.val("0")),t.is(".minus")?e=Number(i)-a:t.is(".plus")&&(e=Number(i)+a);var o=(a.toString().split(".")[1]||[]).length;if(0<o){for(var s="1";s.length<=o;)s+="0";e=Math.round(e*s)/s}O.isNumeric(n)&&O.isNumeric(r)?n<=e&&e<=r&&q.val(e):O.isNumeric(n)&&!O.isNumeric(r)?n<=e&&q.val(e):(O.isNumeric(n)||!O.isNumeric(r)||e<=r)&&q.val(e)}e.is(".disabled")||(e.on("mousedown","div.jq-number__spin",function(){var t=O(this);s(t),i=setTimeout(function(){o=setInterval(function(){s(t)},40)},350)}).on("mouseup mouseout","div.jq-number__spin",function(){clearTimeout(i),clearInterval(o)}).on("mouseup","div.jq-number__spin",function(){q.change().trigger("input")}),q.on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}))})(),q.on("refresh",function(){q.off(".styler").closest(".jq-number").before(q).remove(),o()})):q.is("select")?((s=function(){function A(e){var i,o,s=e.prop("scrollHeight")-e.outerHeight();e.off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll",function(t){i=t.originalEvent.detail<0||0<t.originalEvent.wheelDelta?1:-1,o=e.scrollTop(),(s<=o&&i<0||o<=0&&0<i)&&(t.stopPropagation(),t.preventDefault())})}var j=O("option",q),E="";function D(){for(var t=0;t<j.length;t++){var e=j.eq(t),i="",o="",s="",n="",r="",a="",l="",c="",d="";e.prop("selected")&&(o="selected sel"),e.is(":disabled")&&(o="disabled"),e.is(":selected:disabled")&&(o="selected sel disabled"),void 0!==e.attr("id")&&""!==e.attr("id")&&(n=' id="'+e.attr("id")+N.idSuffix+'"'),void 0!==e.attr("title")&&""!==j.attr("title")&&(r=' title="'+e.attr("title")+'"'),void 0!==e.attr("class")&&(l=" "+e.attr("class"),d=' data-jqfs-class="'+e.attr("class")+'"');var p=e.data();for(var h in p)""!==p[h]&&(a+=" data-"+h+'="'+p[h]+'"');o+l!==""&&(s=' class="'+o+l+'"'),i="<li"+d+a+s+r+n+">"+e.html()+"</li>",e.parent().is("optgroup")&&(void 0!==e.parent().attr("class")&&(c=" "+e.parent().attr("class")),i="<li"+d+a+' class="'+o+l+" option"+c+'"'+r+n+">"+e.html()+"</li>",e.is(":first-child")&&(i='<li class="optgroup'+c+'">'+e.parent().attr("label")+"</li>"+i)),E+=i}}if(q.is("[multiple]")){if(n||P)return;!function(){var t=new H,e=O('<div class="jq-select-multiple jqselect"></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);q.after(e),D(),e.append("<ul>"+E+"</ul>");var i=O("ul",e),s=O("li",e),o=q.attr("size"),n=i.outerHeight(),r=s.outerHeight();void 0!==o&&0<o?i.css({height:r*o}):i.css({height:4*r}),n>e.height()&&(i.css("overflowY","scroll"),A(i),s.filter(".selected").length&&i.scrollTop(i.scrollTop()+s.filter(".selected").position().top)),q.prependTo(e),q.is(":disabled")?(e.addClass("disabled"),j.each(function(){O(this).is(":selected")&&s.eq(O(this).index()).addClass("selected")})):(s.filter(":not(.disabled):not(.optgroup)").click(function(t){q.focus();var e,i,o=O(this);t.ctrlKey||t.metaKey||o.addClass("selected"),t.shiftKey||o.addClass("first"),t.ctrlKey||t.metaKey||t.shiftKey||o.siblings().removeClass("selected first"),(t.ctrlKey||t.metaKey)&&(o.is(".selected")?o.removeClass("selected first"):o.addClass("selected first"),o.siblings().removeClass("first")),t.shiftKey&&(i=e=!1,o.siblings().removeClass("selected").siblings(".first").addClass("selected"),o.prevAll().each(function(){O(this).is(".first")&&(e=!0)}),o.nextAll().each(function(){O(this).is(".first")&&(i=!0)}),e&&o.prevAll().each(function(){return!O(this).is(".selected")&&void O(this).not(".disabled, .optgroup").addClass("selected")}),i&&o.nextAll().each(function(){return!O(this).is(".selected")&&void O(this).not(".disabled, .optgroup").addClass("selected")}),1==s.filter(".selected").length&&o.addClass("first")),j.prop("selected",!1),s.filter(".selected").each(function(){var t=O(this),e=t.index();t.is(".option")&&(e-=t.prevAll(".optgroup").length),j.eq(e).prop("selected",!0)}),q.change()}),j.each(function(t){O(this).data("optionIndex",t)}),q.on("change.styler",function(){s.removeClass("selected");var e=[];j.filter(":selected").each(function(){e.push(O(this).data("optionIndex"))}),s.not(".optgroup").filter(function(t){return-1<O.inArray(t,e)}).addClass("selected")}).on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}),n>e.height()&&q.on("keydown.styler",function(t){38!=t.which&&37!=t.which&&33!=t.which||i.scrollTop(i.scrollTop()+s.filter(".selected").position().top-r),40!=t.which&&39!=t.which&&34!=t.which||i.scrollTop(i.scrollTop()+s.filter(".selected:last").position().top-i.innerHeight()+2*r)}))}()}else!function(){var t=new H,e="",i=q.data("placeholder"),o=q.data("search"),s=q.data("search-limit"),n=q.data("search-not-found"),r=q.data("search-placeholder"),l=q.data("smart-positioning");void 0===i&&(i=N.selectPlaceholder),void 0!==o&&""!==o||(o=N.selectSearch),void 0!==s&&""!==s||(s=N.selectSearchLimit),void 0!==n&&""!==n||(n=N.selectSearchNotFound),void 0===r&&(r=N.selectSearchPlaceholder),void 0!==l&&""!==l||(l=N.selectSmartPositioning);var c=O('<div class="jq-selectbox jqselect"><div class="jq-selectbox__select"><div class="jq-selectbox__select-text"></div><div class="jq-selectbox__trigger"><div class="jq-selectbox__trigger-arrow"></div></div></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);q.after(c).prependTo(c);var d=0<(d=c.css("z-index"))?d:1,a=O("div.jq-selectbox__select",c),p=O("div.jq-selectbox__select-text",c),h=j.filter(":selected");D(),o&&(e='<div class="jq-selectbox__search"><input type="search" autocomplete="off" placeholder="'+r+'"></div><div class="jq-selectbox__not-found">'+n+"</div>");var u=O('<div class="jq-selectbox__dropdown">'+e+"<ul>"+E+"</ul></div>");c.append(u);var f=O("ul",u),m=O("li",u),g=O("input",u),v=O("div.jq-selectbox__not-found",u).hide();m.length<s&&g.parent().hide(),""===j.first().text()&&j.first().is(":selected")&&!1!==i?p.text(i).addClass("placeholder"):p.text(h.text());var y,_,b=0,x=0;m.css({display:"inline-block"}),m.each(function(){var t=O(this);t.innerWidth()>b&&(b=t.innerWidth(),x=t.width())}),m.css({display:""}),p.is(".placeholder")&&p.width()>b?p.width(p.width()):(_=(y=c.clone().appendTo("body").width("auto")).outerWidth(),y.remove(),_==c.outerWidth()&&p.width(x)),b>c.width()&&u.width(b),""===j.first().text()&&""!==q.data("placeholder")&&m.first().hide();var w,k=c.outerHeight(!0),T=g.parent().outerHeight(!0)||0,C=f.css("max-height"),S=m.filter(".selected");S.length<1&&m.first().addClass("selected sel"),void 0===m.data("li-height")&&(w=m.outerHeight(),!1!==i&&(w=m.eq(1).outerHeight()),m.data("li-height",w));var $=u.css("top");"auto"==u.css("left")&&u.css({left:0}),"auto"==u.css("top")&&(u.css({top:k}),$=k),u.hide(),S.length&&(j.first().text()!=h.text()&&c.addClass("changed"),c.data("jqfs-class",S.data("jqfs-class")),c.addClass(S.data("jqfs-class"))),q.is(":disabled")?c.addClass("disabled"):(a.click(function(){var e,i,o,s,t,n,r,a;O("div.jq-selectbox").filter(".opened").length&&N.onSelectClosed.call(O("div.jq-selectbox").filter(".opened")),q.focus(),P||(e=O(window),i=m.data("li-height"),o=c.offset().top,s=e.height()-k-(o-e.scrollTop()),void 0!==(t=q.data("visible-options"))&&""!==t||(t=N.selectVisibleOptions),n=5*i,r=i*t,0<t&&t<6&&(n=r),0===t&&(r="auto"),a=function(){u.height("auto").css({bottom:"auto",top:$});function t(){f.css("max-height",Math.floor((s-20-T)/i)*i)}t(),f.css("max-height",r),"none"!=C&&f.css("max-height",C),s<u.outerHeight()+20&&t()},!0===l||1===l?n+T+20<s?(a(),c.removeClass("dropup").addClass("dropdown")):(function(){u.height("auto").css({top:"auto",bottom:$});function t(){f.css("max-height",Math.floor((o-e.scrollTop()-20-T)/i)*i)}t(),f.css("max-height",r),"none"!=C&&f.css("max-height",C),o-e.scrollTop()-20<u.outerHeight()+20&&t()}(),c.removeClass("dropdown").addClass("dropup")):!1===l||0===l?n+T+20<s&&(a(),c.removeClass("dropup").addClass("dropdown")):(u.height("auto").css({bottom:"auto",top:$}),f.css("max-height",r),"none"!=C&&f.css("max-height",C)),c.offset().left+u.outerWidth()>e.width()&&u.css({left:"auto",right:0}),O("div.jqselect").css({zIndex:d-1}).removeClass("opened"),c.css({zIndex:d}),u.is(":hidden")?(O("div.jq-selectbox__dropdown:visible").hide(),u.show(),c.addClass("opened focused"),N.onSelectOpened.call(c)):(u.hide(),c.removeClass("opened dropup dropdown"),O("div.jq-selectbox").filter(".opened").length&&N.onSelectClosed.call(c)),g.length&&(g.val("").keyup(),v.hide(),g.keyup(function(){var t=O(this).val();m.each(function(){O(this).html().match(new RegExp(".*?"+t+".*?","i"))?O(this).show():O(this).hide()}),""===j.first().text()&&""!==q.data("placeholder")&&m.first().hide(),m.filter(":visible").length<1?v.show():v.hide()})),m.filter(".selected").length&&(""===q.val()?f.scrollTop(0):(f.innerHeight()/i%2!=0&&(i/=2),f.scrollTop(f.scrollTop()+m.filter(".selected").position().top-f.innerHeight()/2+i))),A(f))}),m.hover(function(){O(this).siblings().removeClass("selected")}),m.filter(".selected").text(),m.filter(":not(.disabled):not(.optgroup)").click(function(){q.focus();var t,e=O(this),i=e.text();e.is(".selected")||(t=e.index(),t-=e.prevAll(".optgroup").length,e.addClass("selected sel").siblings().removeClass("selected sel"),j.prop("selected",!1).eq(t).prop("selected",!0),p.text(i),c.data("jqfs-class")&&c.removeClass(c.data("jqfs-class")),c.data("jqfs-class",e.data("jqfs-class")),c.addClass(e.data("jqfs-class")),q.change()),u.hide(),c.removeClass("opened dropup dropdown"),N.onSelectClosed.call(c)}),u.mouseout(function(){O("li.sel",u).addClass("selected")}),q.on("change.styler",function(){p.text(j.filter(":selected").text()).removeClass("placeholder"),m.removeClass("selected sel").not(".optgroup").eq(q[0].selectedIndex).addClass("selected sel"),j.first().text()!=m.filter(".selected").text()?c.addClass("changed"):c.removeClass("changed")}).on("focus.styler",function(){c.addClass("focused"),O("div.jqselect").not(".focused").removeClass("opened dropup dropdown").find("div.jq-selectbox__dropdown").hide()}).on("blur.styler",function(){c.removeClass("focused")}).on("keydown.styler keyup.styler",function(t){var e=m.data("li-height");""===q.val()?p.text(i).addClass("placeholder"):p.text(j.filter(":selected").text()),m.removeClass("selected sel").not(".optgroup").eq(q[0].selectedIndex).addClass("selected sel"),38!=t.which&&37!=t.which&&33!=t.which&&36!=t.which||(""===q.val()?f.scrollTop(0):f.scrollTop(f.scrollTop()+m.filter(".selected").position().top)),40!=t.which&&39!=t.which&&34!=t.which&&35!=t.which||f.scrollTop(f.scrollTop()+m.filter(".selected").position().top-f.innerHeight()+e),13==t.which&&(t.preventDefault(),u.hide(),c.removeClass("opened dropup dropdown"),N.onSelectClosed.call(c))}).on("keydown.styler",function(t){32==t.which&&(t.preventDefault(),a.click())}),M.registered||(O(document).on("click",M),M.registered=!0))}()})(),q.on("refresh",function(){q.off(".styler").parent().before(q).remove(),s()})):q.is(":reset")&&q.on("click",function(){setTimeout(function(){q.closest("form").find("input, select").trigger("refresh")},1)})},destroy:function(){var t=O(this.element);t.is(":checkbox")||t.is(":radio")?(t.removeData("_"+s).off(".styler refresh").removeAttr("style").parent().before(t).remove(),t.closest("label").add('label[for="'+t.attr("id")+'"]').off(".styler")):t.is('input[type="number"]')?t.removeData("_"+s).off(".styler refresh").closest(".jq-number").before(t).remove():(t.is(":file")||t.is("select"))&&t.removeData("_"+s).off(".styler refresh").removeAttr("style").parent().before(t).remove()}},O.fn[s]=function(e){var i,o=arguments;return void 0===e||"object"==typeof e?(this.each(function(){O.data(this,"_"+s)||O.data(this,"_"+s,new n(this,e))}).promise().done(function(){var t=O(this[0]).data("_"+s);t&&t.options.onFormStyled.call()}),this):"string"==typeof e&&"_"!==e[0]&&"init"!==e?(this.each(function(){var t=O.data(this,"_"+s);t instanceof n&&"function"==typeof t[e]&&(i=t[e].apply(t,Array.prototype.slice.call(o,1)))}),void 0!==i?i:this):void 0},M.registered=!1}),function(z){"use strict";var R='<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>',o={starWidth:"32px",normalFill:"gray",ratedFill:"#f39c12",numStars:5,maxValue:5,precision:1,rating:0,fullStar:!1,halfStar:!1,readOnly:!1,spacing:"0px",rtl:!1,multiColor:null,onInit:null,onChange:null,onSet:null,starSvg:null},B={startColor:"#c0392b",endColor:"#f1c40f"};function U(t,e,i){return t===e?t=e:t===i&&(t=i),t}function X(t){return void 0!==t}var i=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i,V=function(t){if(!i.test(t))return null;var e=i.exec(t);return{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}};function Y(t,e,i){var o=i/100*(e-t);return 1===(o=Math.round(t+o).toString(16)).length&&(o="0"+o),o}function G(n,u){this.node=n.get(0);var i=this;n.empty().addClass("jq-ry-container");var f,o,m,g,v,t,e=z("<div/>").addClass("jq-ry-group-wrapper").appendTo(n),y=z("<div/>").addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo(e),s=z("<div/>").addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo(e),_=0,r=u.rating,a=!1;function l(t){X(t)||(t=u.rating);var e=(r=t)/f,i=e*m;1<e&&(i+=(Math.ceil(e)-1)*v),x(u.ratedFill),(i=u.rtl?100-i:i)<0?i=0:100<i&&(i=100),s.css("width",i+"%")}function c(){t=o*u.numStars+g*(u.numStars-1),m=o/t*100,v=g/t*100,n.width(t),l()}function d(t){var e=u.starWidth=t;return o=window.parseFloat(u.starWidth.replace("px","")),y.find("svg").attr({width:u.starWidth,height:e}),s.find("svg").attr({width:u.starWidth,height:e}),c(),n}function p(t){return u.spacing=t,g=parseFloat(u.spacing.replace("px","")),y.find("svg:not(:first-child)").css({"margin-left":t}),s.find("svg:not(:first-child)").css({"margin-left":t}),c(),n}function h(t){return u.normalFill=t,(u.rtl?s:y).find("svg").attr({fill:u.normalFill}),n}var b=u.ratedFill;function x(t){var e,i;return u.multiColor?(e=(r-_)/u.maxValue*100,t=function(t,e,i){if(!t||!e)return null;i=X(i)?i:0,t=V(t),e=V(e);var o=Y(t.r,e.r,i),s=Y(t.b,e.b,i);return"#"+o+Y(t.g,e.g,i)+s}((i=u.multiColor||{}).startColor||B.startColor,i.endColor||B.endColor,e)):b=t,u.ratedFill=t,(u.rtl?y:s).find("svg").attr({fill:u.ratedFill}),n}function w(t){t=!!t,u.rtl=t,h(u.normalFill),l()}function k(t){u.multiColor=t,x(t||b)}function T(t){u.numStars=t,f=u.maxValue/u.numStars,y.empty(),s.empty();for(var e=0;e<u.numStars;e++)y.append(z(u.starSvg||R)),s.append(z(u.starSvg||R));return d(u.starWidth),h(u.normalFill),p(u.spacing),l(),n}function C(t){return u.maxValue=t,f=u.maxValue/u.numStars,u.rating>t&&D(t),l(),n}function S(t){return u.precision=t,D(u.rating),n}function $(t){return u.halfStar=t,n}function A(t){return u.fullStar=t,n}function j(t){var e,i,o,s,n,r=y.offset().left,a=r+y.width(),l=u.maxValue,c=t.pageX,d=0;if(c<r)d=_;else if(a<c)d=l;else{var p=(c-r)/(a-r);if(0<g)for(var h=p*=100;0<h;)m<h?(d+=f,h-=m+v):(d+=h/m*f,h=0);else d=p*u.maxValue;i=(e=d)%f,o=f/2,s=u.halfStar,((n=u.fullStar)||s)&&(n||s&&o<i?e+=f-i:(e-=i,0<i&&(e+=o))),d=e}return u.rtl&&(d=l-d),parseFloat(d)}function E(t){return u.readOnly=t,n.attr("readonly",!0),W(),t||(n.removeAttr("readonly"),n.on("mousemove",H).on("mouseenter",H).on("mouseleave",O).on("click",M).on("rateyo.init",L).on("rateyo.change",F).on("rateyo.set",I)),n}function D(t){var e=t,i=u.maxValue;return"string"==typeof e&&("%"===e[e.length-1]&&(e=e.substr(0,e.length-1),C(i=100)),e=parseFloat(e)),function(t,e,i){if(!(e<=t&&t<=i))throw Error("Invalid Rating, expected value between "+e+" and "+i)}(e,_,i),e=parseFloat(e.toFixed(u.precision)),U(parseFloat(e),_,i),u.rating=e,l(),a&&n.trigger("rateyo.set",{rating:e}),n}function q(t){return u.onInit=t,n}function N(t){return u.onSet=t,n}function P(t){return u.onChange=t,n}function H(t){var e=j(t).toFixed(u.precision),i=u.maxValue;l(e=U(parseFloat(e),_,i)),n.trigger("rateyo.change",{rating:e})}function O(){var t,e;e=!1,t=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0),e||(l(),n.trigger("rateyo.change",{rating:u.rating}))}function M(t){var e=j(t).toFixed(u.precision),e=parseFloat(e);i.rating(e)}function L(t,e){u.onInit&&"function"==typeof u.onInit&&u.onInit.apply(this,[e.rating,i])}function F(t,e){u.onChange&&"function"==typeof u.onChange&&u.onChange.apply(this,[e.rating,i])}function I(t,e){u.onSet&&"function"==typeof u.onSet&&u.onSet.apply(this,[e.rating,i])}function W(){n.off("mousemove",H).off("mouseenter",H).off("mouseleave",O).off("click",M).off("rateyo.init",L).off("rateyo.change",F).off("rateyo.set",I)}this.rating=function(t){return X(t)?(D(t),n):u.rating},this.destroy=function(){var o,s;return u.readOnly||W(),G.prototype.collection=(o=n.get(0),s=this.collection,z.each(s,function(t){if(o===this.node){var e=s.slice(0,t),i=s.slice(t+1,s.length);return s=e.concat(i),!1}}),s),n.removeClass("jq-ry-container").children().remove(),n},this.method=function(t){if(!t)throw Error("Method name not specified!");if(!X(this[t]))throw Error("Method "+t+" doesn't exist!");var e=Array.prototype.slice.apply(arguments,[]).slice(1);return this[t].apply(this,e)},this.option=function(t,e){if(!X(t))return u;var i;switch(t){case"starWidth":i=d;break;case"numStars":i=T;break;case"normalFill":i=h;break;case"ratedFill":i=x;break;case"multiColor":i=k;break;case"maxValue":i=C;break;case"precision":i=S;break;case"rating":i=D;break;case"halfStar":i=$;break;case"fullStar":i=A;break;case"readOnly":i=E;break;case"spacing":i=p;break;case"rtl":i=w;break;case"onInit":i=q;break;case"onSet":i=N;break;case"onChange":i=P;break;default:throw Error("No such option as "+t)}return X(e)?i(e):u[t]},T(u.numStars),E(u.readOnly),u.rtl&&w(u.rtl),this.collection.push(this),this.rating(u.rating,!0),a=!0,n.trigger("rateyo.init",{rating:u.rating})}function c(t,e){var i;return z.each(e,function(){if(t===this.node)return i=this,!1}),i}G.prototype.collection=[],window.RateYo=G,z.fn.rateYo=function(){return function(i){var n=G.prototype.collection,t=z(this);if(0===t.length)return t;var e=Array.prototype.slice.apply(arguments,[]);if(0===e.length)i=e[0]={};else{if(1!==e.length||"object"!=typeof e[0]){if(1<=e.length&&"string"==typeof e[0]){var r=e[0],a=e.slice(1),l=[];return z.each(t,function(t,e){var i=c(e,n);if(!i)throw Error("Trying to set options before even initialization");var o=i[r];if(!o)throw Error("Method "+r+" does not exist!");var s=o.apply(i,a);l.push(s)}),l=1===l.length?l[0]:l}throw Error("Invalid Arguments")}i=e[0]}return i=z.extend({},o,i),z.each(t,function(){var t=c(this,n);if(t)return t;var e=z(this),o={},s=z.extend({},i);return z.each(e.data(),function(t,e){var i;0===t.indexOf("rateyo")&&(i=(i=t.replace(/^rateyo/,""))[0].toLowerCase()+i.slice(1),o[i]=e,delete s[i])}),new G(z(this),z.extend({},o,s))})}.apply(this,Array.prototype.slice.apply(arguments,[]))}}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
